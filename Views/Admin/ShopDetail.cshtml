@{
    Layout = "_LayoutAdmin";
    ViewBag.Title = "Chi tiết cửa hàng";
}

<!-- Start Page Content -->

<div class="page-content">
  <!-- Start Container Fluid -->

  <div class="container-xxl">
    <div class="row">
      <div class="col-12">
        <!-- Thông tin shop -->

        <div class="card">
          <div class="card-body">
            <div class="row">
              <div class="col-lg-4">
                <div class="d-flex align-items-center">
                  <div class="flex-shrink-0">
                    <img
                      src="assets/images/users/avatar-2.jpg"
                      alt=""
                      class="avatar-xl rounded"
                    />
                  </div>

                  <div class="flex-grow-1 ms-3">
                    <h4 class="mb-1">Cửa Hàng Nông Sản Sạch</h4>

                    <p class="text-muted mb-1">
                      <i class="bx bx-map-pin me-1"></i>123 Đường ABC, Quận 1,
                      TP.HCM
                    </p>

                    <p class="text-muted mb-0">
                      <i class="bx bx-phone me-1"></i>0987654321
                    </p>
                  </div>
                </div>
              </div>

              <div class="col-lg-4">
                <div class="mt-4 mt-lg-0">
                  <div class="row">
                    @* <div class="col-md-6">
                      <div class="mt-3">
                        <p class="text-muted mb-2">Đánh Giá Shop</p>

                        <h5 class="mb-0">
                          4.8 <i class="bx bxs-star text-warning"></i>
                        </h5>
                      </div>
                    </div> *@

                    <div class="col-md-6">
                      <div class="mt-3">
                        <p class="text-muted mb-2">Loại shop</p>
                        <h5 class="mb-0" id="shop-type"></h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-lg-4">
                <div class="mt-4 mt-lg-0">
                  <div class="row">
                    <div class="col-md-6">
                      <div class="mt-3">
                        <p class="text-muted mb-2">Thời Gian Phản Hồi</p>

                        <h5 class="mb-0">Trong vòng 24h</h5>
                      </div>
                    </div>

                    <div class="col-md-6">
                      <div class="mt-3">
                        <p class="text-muted mb-2">Ngày Tham Gia</p>
                        <h5 class="mb-0" id="date-joined">01/01/2024</h5>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Thống kê -->

        <div class="row">
          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-body">
                <div class="d-flex align-items-center">
                  <div class="flex-grow-1">
                    <h4 class="mb-2 fw-semibold">Tổng Sản Phẩm</h4>
                  </div>

                  <div class="flex-shrink-0">
                    <div class="avatar-sm">
                      <span
                        class="avatar-title bg-primary-subtle text-primary rounded-circle fs-3"
                      >
                        <i class="bx bx-package"></i>
                      </span>
                    </div>
                  </div>
                </div>

                <div class="pt-4">
                  <h2 class="counter-value" data-target="156">156</h2>
                </div>
              </div>
            </div>
          </div>

          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-body">
                <div class="d-flex align-items-center">
                  <div class="flex-grow-1">
                    <h4 class="mb-2 fw-semibold">Sản Phẩm Hết Hàng</h4>
                  </div>

                  <div class="flex-shrink-0">
                    <div class="avatar-sm">
                      <span
                        class="avatar-title bg-danger-subtle text-danger rounded-circle fs-3"
                      >
                        <i class="bx bx-x-circle"></i>
                      </span>
                    </div>
                  </div>
                </div>

                <div class="pt-4">
                  <h2 class="counter-value" data-target="8">8</h2>
                </div>
              </div>
            </div>
          </div>

          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-body">
                <div class="d-flex align-items-center">
                  <div class="flex-grow-1">
                    <h4 class="mb-2 fw-semibold">Tổng số đơn hàng</h4>
                  </div>

                  <div class="flex-shrink-0">
                    <div class="avatar-sm">
                      <span
                        class="avatar-title bg-success-subtle text-success rounded-circle fs-3"
                      >
                        <i class="bx bx-trending-up"></i>
                      </span>
                    </div>
                  </div>
                </div>

                <div class="pt-4">
                  <h2 class="counter-value" data-target="32">32</h2>
                </div>
              </div>
            </div>
          </div>

          <div class="col-xl-3 col-md-6">
            <div class="card">
              <div class="card-body">
                <div class="d-flex align-items-center">
                  <div class="flex-grow-1">
                    <h4 class="mb-2 fw-semibold">Doanh Thu</h4>
                  </div>

                  <div class="flex-shrink-0">
                    <div class="avatar-sm">
                      <span
                        class="avatar-title bg-info-subtle text-info rounded-circle fs-3"
                      >
                        <i class="bx bx-money"></i>
                      </span>
                    </div>
                  </div>
                </div>

                <div class="pt-4">
                  <h2 class="counter-value">32.189.000đ</h2>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-header d-flex align-items-center">
            <h5 class="card-title flex-grow-1 mb-0">Danh Sách Sản Phẩm</h5>

            <div class="flex-shrink-0">
              <div class="d-flex gap-2">
                <button type="button" class="btn btn-soft-primary btn-sm">
                  <i class="bx bx-export me-1"></i> Xuất Excel
                </button>

                <button type="button" class="btn btn-primary btn-sm">
                  <i class="bx bx-plus me-1"></i> Thêm Sản Phẩm
                </button>
              </div>
            </div>
          </div>

          <div class="card-body">
            <!-- Thêm bộ tìm kiếm và lọc -->
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="input-group">
                  <input
                    type="text"
                    class="form-control"
                    placeholder="Tìm kiếm sản phẩm..."
                    id="product-search-input"
                  />
                  <button class="btn btn-primary" type="button" id="product-search-button">
                    <i class="bx bx-search"></i>
                  </button>
                </div>
              </div>
              <div class="col-md-6 text-end">
                <button
                  type="button"
                  class="btn btn-outline-secondary me-1"
                  data-bs-toggle="modal"
                  data-bs-target="#filterModal"
                >
                  <i class="bx bx-filter-alt me-1"></i> Lọc
                </button>
                <button type="button" class="btn btn-outline-danger me-1" id="reset-filter-button">
                  <i class="bx bx-reset me-1"></i> Reset
                </button>
              </div>
            </div>
            <div class="table-responsive">
              <table class="table align-middle mb-0 table-hover table-centered">
                <thead class="bg-light-subtle">
                  <tr>
                    <th style="width: 20px">
                      <div class="form-check ms-1">
                        <input
                          type="checkbox"
                          class="form-check-input"
                          id="select-all-checkbox"
                        />
                        <label
                          class="form-check-label"
                          for="customCheck1"
                        ></label>
                      </div>
                    </th>
                    <th>Tên Sản Phẩm & Thông Tin</th>
                    <th>Giá</th>
                    <th>Tồn Kho</th>
                    <th>Danh Mục</th>
                    <th>Đánh Giá</th>
                    <th>Thao Tác</th>
                  </tr>
                </thead>
                <tbody id="product-table-body">
                  <!-- JavaScript sẽ tạo ra các dòng dữ liệu tại đây -->
                </tbody>
              </table>
            </div>
            <!-- end table-responsive -->
          </div>
          <div class="card-footer border-top">
            <div id="paging-count"></div>
            <nav aria-label="Page navigation example">
              <ul class="pagination justify-content-end mb-0" id="paging-list">
                <li class="page-item">
                  <a class="page-link" href="javascript:void(0);" id="btn-prev">Trước</a>
                </li>
                <li class="page-item">
                  <a class="page-link" href="javascript:void(0);" id="btn-next">Sau</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- End Container Fluid -->
</div>

<!-- Modal Lọc -->
<div
  class="modal fade"
  id="filterModal"
  tabindex="-1"
  aria-labelledby="filterModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="filterModalLabel">Lọc Sản Phẩm</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label class="form-label">Danh Mục</label>
            <select class="form-select" id="category-filter">
              <option value="-999">Tất cả</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Xuất Xứ</label>
            <select class="form-select" id="origin-filter">
              <option value="-999">Tất cả</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Giá (VNĐ)</label>
            <div class="row">
              <div class="col-6">
                <input type="number" class="form-control" placeholder="Từ" id="min-price-filter" />
              </div>
              <div class="col-6">
                <input type="number" class="form-control" placeholder="Đến" id="max-price-filter" />
              </div>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Tình Trạng Kho</label>
            <div class="form-check">
              <input
                class="form-check-input"
                type="radio"
                id="inStock"
                name="stock-status"
                checked
              />
              <label class="form-check-label" for="inStock"> Còn hàng </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" id="outOfStock" name="stock-status" />
              <label class="form-check-label mt-1" for="outOfStock">
                Hết hàng
              </label>
            </div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Sắp Xếp Theo</label>
            <select class="form-select" id="sort-by-filter">
              <option value="0">Mặc định</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">
          Hủy
        </button>
        <button type="button" class="btn btn-primary" id="apply-filter-button">Áp Dụng</button>
      </div>
    </div>
  </div>
</div>

<!-- End Page Content -->
<script type="module">
    import { BaseService } from "/custom/BaseService.js";
    import createFilterProduct from "/custom/filterProduct.js";
    import { SortType } from "/custom/Enum.js";
    import { EnumService } from "/custom/EnumService.js";
    import key from "/custom/jwt.js";
    import url from "/Custom/endpoints.js";
  
    const jwt = key;
    const enumService = new EnumService(url.baseUrl, jwt);
    const productService = new BaseService(
      url.base + "/Product",
      jwt
    );
    const categoryService = new BaseService(
      url.base + "/Category",
      jwt
    );
    const storeService = new BaseService(
        url.base + "/Store",
        jwt
    );
    
    
    
    const appProduct = {
      filter: new createFilterProduct({
        searchTerm: "",
        sortBy: SortType.Latest,
        page: 1,
        pageSize: 10,
        minPrice: 0,
        maxPrice: 10000000,
        categoryId: -999,
        origin: "",
        isActive: null,
        isInStock: null,
        unit: -999,
        storeId: null
      }),
      appliedFilters: {},
      categories: [],
      origins: [],
      units: {},
      init: function (storeId) {
        this.filter.storeId = storeId;
        this.loadCategories();
        this.loadOrigins();
        this.loadUnits();
        this.loadSortType();
        this.handleFilterFunction();
        this.handleResetFilter();
        this.handleApplyFilter();
        this.handleSearchFunction();
        this.handlePagingFunction();
        this.handleSelectAll();
        this.loadStatistics();
        this.initializeFilters();
  
        // Tải dữ liệu ban đầu
        this.applyFilter();
      },
  
      initializeFilters: function () {
        // Khởi tạo giá trị mặc định cho các bộ lọc
        this.updateAppliedFiltersDisplay();
      },

      loadStatistics: function () {
        const _this = this;
        storeService.fetchApi(`/${_this.filter.storeId}/get-statistics-store`, 'GET').then(response => {
          console.log("Response statistics:", response);
          let cards = document.querySelectorAll('.counter-value');
            let i = 0;
            for(let key in response.data){
              console.log("Key:", key);
              if(i == 3){
                cards[i].textContent = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(response.data[key]);
                break;
              }else{
                cards[i].textContent = response.data[key];
              }
              i++;
            }
        });
      },
  
      applyFilter: function () {
        const _this = this;
  
        productService
          .find(_this.filter)
          .then((data) => {
            console.log("Product data:", data);
            if (data && data.success) {
              const items = data.data || [];
              _this.reloadTable(items);
  
              // Cập nhật phân trang
              const start = (_this.filter.page - 1) * _this.filter.pageSize + 1;
              const end = start + items.length - 1;
              const totalCount = data.totalCount || 0;

              let text = '';
              if(totalCount == 0){
                text = 'Không có dữ liệu';
              }else{
                text = `Hiển thị ${start} - ${end}/${totalCount} sản phẩm`;
              }
  
              document.getElementById(
                "paging-count"
              ).textContent = text;
  
              // Cập nhật danh sách phân trang
              const pagingList = document.getElementById("paging-list");
              pagingList.innerHTML = `
                <li class="page-item" id="btn-prev">
                  <a href="#" class="page-link"><i class="bx bx-left-arrow-alt"></i></a>
                </li>`;
  
              const totalPages = Math.ceil(totalCount / _this.filter.pageSize);
  
              for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement("li");
                li.classList.add("page-item");
  
                if (i === _this.filter.page) {
                  li.classList.add("active");
                }
  
                li.addEventListener("click", () => {
                  _this.filter.page = i;
                  _this.applyFilter();
                });
  
                const a = document.createElement("a");
                a.classList.add("page-link");
                a.textContent = i;
                a.href = "#";
  
                li.appendChild(a);
                pagingList.appendChild(li);
              }
  
              pagingList.innerHTML += `
                <li class="page-item" id="btn-next">
                  <a href="#" class="page-link"><i class="bx bx-right-arrow-alt"></i></a>
                </li>`;
  
              // Vô hiệu hóa nút Prev nếu đang ở trang đầu tiên
              if (_this.filter.page === 1) {
                document.getElementById("btn-prev").classList.add("disabled");
              }
  
              // Vô hiệu hóa nút Next nếu đang ở trang cuối cùng
              if (_this.filter.page === totalPages) {
                document.getElementById("btn-next").classList.add("disabled");
              }
            } else {
              // Hiển thị thông báo lỗi
              document.getElementById("product-table-body").innerHTML = `
                <tr>
                  <td colspan="7" class="text-center text-danger">
                    Không thể tải dữ liệu sản phẩm. Vui lòng thử lại sau.
                  </td>
                </tr>`;
  
              document.getElementById("paging-count").textContent =
                "Không có dữ liệu";
            }
          })
          .catch((error) => {
            console.error("Error retrieving products:", error);
            document.getElementById("product-table-body").innerHTML = `
              <tr>
                <td colspan="7" class="text-center text-danger">
                  Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.
                </td>
              </tr>`;
  
            document.getElementById("paging-count").textContent = "Đã xảy ra lỗi";
          });
      },
  
      loadCategories: function () {
        // Load danh mục vào dropdown
        const categoryDropdown = document.getElementById("category-filter");
        categoryDropdown.innerHTML =
          "<option value='-999' selected>Tất cả</option>";
  
        categoryService
          .getAll()
          .then((data) => {
            if (data && data.success) {
              const items = data.data || [];
              this.categories = items;
  
              items.forEach((item) => {
                const option = document.createElement("option");
                option.value = item.id;
                option.textContent = item.name;
                categoryDropdown.appendChild(option);
              });
            }
          })
          .catch((error) => {
            console.error("Error retrieving categories:", error);
          });
      },
  
      loadOrigins: function () {
        // Load xuất xứ vào dropdown
        const originDropdown = document.getElementById("origin-filter");
        originDropdown.innerHTML = "<option value=''>Tất cả</option>";
  
        enumService
          .getOriginTypes()
          .then((data) => {
            if (data) {
              this.origins = data;
  
              data.forEach((origin) => {
                const option = document.createElement("option");
                option.value = origin;
                option.textContent = origin;
                originDropdown.appendChild(option);
              });
            }
          })
          .catch((error) => {
            console.error("Error retrieving origins:", error);
          });
      },
      
      loadUnits: function () {
        enumService.getUnitTypes().then((data) => {
          if (data) {
            this.units = data;
          }
        })
        .catch((error) => {
          console.error("Error retrieving units:", error);
        });
      },
  
      loadSortType: function () {
        const sortByDropdown = document.getElementById("sort-by-filter");
        sortByDropdown.innerHTML = "";
  
        enumService
          .getSortTypesByEntity("Product")
          .then((data) => {
            if (data) {
              Object.keys(data).forEach((key) => {
                const option = document.createElement("option");
                option.value = key;
                option.textContent = data[key];
                sortByDropdown.appendChild(option);
              });
            }
          })
          .catch((error) => {
            console.error("Error retrieving sort types:", error);
            // Thêm các giá trị mặc định nếu API thất bại
            const defaultSortOptions = [
              { value: "0", text: "Mặc định" },
              { value: "0", text: "Không thể tải dữ liệu" },
            ];
  
            defaultSortOptions.forEach((option) => {
              const optionElement = document.createElement("option");
              optionElement.value = option.value;
              optionElement.textContent = option.text;
              sortByDropdown.appendChild(optionElement);
            });
          });
      },
  
      handleFilterFunction: function () {
        // Sự kiện khi bấm nút lọc trên giao diện chính
        const filterButton = document.querySelector(
          "[data-bs-target='#filterModal']"
        );
        const _this = this;
  
        filterButton.addEventListener("click", () => {
          // Cập nhật các giá trị trong modal filter từ filter hiện tại
          _this.updateFilterModal();
        });
      },
  
      updateFilterModal: function () {
        // Cập nhật giá trị trong modal từ filter hiện tại
        const categoryDropdown = document.getElementById("category-filter");
        const originDropdown = document.getElementById("origin-filter");
        const minPriceInput = document.getElementById("min-price-filter");
        const maxPriceInput = document.getElementById("max-price-filter");
        const stockRadios = document.querySelectorAll("[name='stock-status']");
        const sortByDropdown = document.getElementById("sort-by-filter");
  
        // Đặt giá trị cho từng trường
        if (this.filter.categoryId !== -999) {
          categoryDropdown.value = this.filter.categoryId;
        } else {
          categoryDropdown.value = -999;
        }
  
        if (this.filter.origin) {
          originDropdown.value = this.filter.origin;
        } else {
          originDropdown.value = "";
        }
  
        minPriceInput.value =
          this.filter.minPrice > 0 ? this.filter.minPrice : "";
        maxPriceInput.value =
          this.filter.maxPrice < 10000000 ? this.filter.maxPrice : "";
  
        // Cập nhật radio buttons tồn kho
        if (this.filter.isInStock === true) {
          document.getElementById("inStock").checked = true;
        } else if (this.filter.isInStock === false) {
          document.getElementById("outOfStock").checked = true;
        } 
  
        // Cập nhật sort by
        if (
          sortByDropdown.querySelector(`option[value="${this.filter.sortBy}"]`)
        ) {
          sortByDropdown.value = this.filter.sortBy;
        }
      },
  
      handleResetFilter: function () {
        const resetButton = document.getElementById("reset-filter-button");
        const _this = this;
  
        resetButton.addEventListener("click", () => {
          // Reset filter về giá trị mặc định
          _this.filter = new createFilterProduct({
            searchTerm: "",
            sortBy: SortType.Latest,
            page: 1,
            pageSize: 10,
            minPrice: 0,
            maxPrice: 10000000,
            categoryId: -999,
            origin: "",
            isActive: null,
            isInStock: null,
            unit: -999,
            storeId: _this.filter.storeId
          });
  
          // Reset ô tìm kiếm
          document.getElementById("product-search-input").value = "";
  
          // Cập nhật lại UI
          _this.updateAppliedFiltersDisplay();
          _this.applyFilter();
        });
      },
  
      handleApplyFilter: function () {
        const applyButton = document.getElementById("apply-filter-button");
        const _this = this;
  
        applyButton.addEventListener("click", () => {
          // Lấy giá trị từ các trường trong modal
          const categoryId = document.getElementById("category-filter").value;
          const origin = document.getElementById("origin-filter").value;
          const minPrice = document.getElementById("min-price-filter").value;
          const maxPrice = document.getElementById("max-price-filter").value;
          const isStock = document.getElementById("inStock").checked;
          const sortBy = document.getElementById("sort-by-filter").value;
  
          // Cập nhật filter
          if (categoryId) {
            _this.filter.categoryId = parseInt(categoryId);
          }
  
          if (origin) {
            _this.filter.origin = origin;
          } else {
            _this.filter.origin = "";
          }
  
          if (minPrice) {
            _this.filter.minPrice = parseInt(minPrice);
          } else {
            _this.filter.minPrice = 0;
          }
  
          if (maxPrice) {
            _this.filter.maxPrice = parseInt(maxPrice);
          } else {
            _this.filter.maxPrice = 10000000;
          }
          console.log(isStock)
          if (isStock) {
            _this.filter.isInStock = true;
          } else {
            _this.filter.isInStock = false;
          }
  
          if (sortBy) {
            _this.filter.sortBy = parseInt(sortBy);
          }
  
          // Reset trang về 1
          _this.filter.page = 1;
  
          // Đóng modal
          const filterModal = bootstrap.Modal.getInstance(
            document.getElementById("filterModal")
          );
          filterModal.hide();
  
          // Cập nhật hiển thị bộ lọc đã áp dụng
          _this.updateAppliedFiltersDisplay();
  
          // Áp dụng bộ lọc
          _this.applyFilter();
        });
      },
  
      updateAppliedFiltersDisplay: function () {
        // Không cần code vì đã tạo static trong HTML
      },
  
      handleSearchFunction: function () {
        const searchInput = document.getElementById("product-search-input");
        const searchButton = document.getElementById("product-search-button");
        const _this = this;
  
        // Xử lý khi nhấn nút tìm kiếm
        searchButton.addEventListener("click", () => {
          _this.filter.searchTerm = searchInput.value;
          _this.filter.page = 1; // Reset về trang 1
          _this.updateAppliedFiltersDisplay();
          _this.applyFilter();
        });
  
        // Xử lý khi nhấn Enter trong ô tìm kiếm
        searchInput.addEventListener("keypress", (e) => {
          if (e.key === "Enter") {
            _this.filter.searchTerm = searchInput.value;
            _this.filter.page = 1; // Reset về trang 1
            _this.updateAppliedFiltersDisplay();
            _this.applyFilter();
            e.preventDefault();
          }
        });
      },
  
      handlePagingFunction: function () {
        const _this = this;
  
        // Sự kiện cho nút Previous
        document.addEventListener("click", function (e) {
          if (
            e.target.closest("#btn-prev") &&
            !e.target.closest("#btn-prev").classList.contains("disabled")
          ) {
            e.preventDefault();
            if (_this.filter.page > 1) {
              _this.filter.page--;
              _this.applyFilter();
            }
          }
        });
  
        // Sự kiện cho nút Next
        document.addEventListener("click", function (e) {
          if (
            e.target.closest("#btn-next") &&
            !e.target.closest("#btn-next").classList.contains("disabled")
          ) {
            e.preventDefault();
            _this.filter.page++;
            _this.applyFilter();
          }
        });
      },
  
      handleSelectAll: function () {
        const selectAllCheckbox = document.getElementById("select-all-checkbox");
  
        selectAllCheckbox.addEventListener("change", () => {
          const isChecked = selectAllCheckbox.checked;
          const checkboxes = document.querySelectorAll(
            "#product-table-body .form-check-input"
          );
  
          checkboxes.forEach((checkbox) => {
            checkbox.checked = isChecked;
          });
        });
      },
  
      reloadTable: function (items) {
        const tableBody = document.getElementById("product-table-body");
        tableBody.innerHTML = "";
  
        if (!items || items.length === 0) {
          tableBody.innerHTML = `
            <tr>
              <td colspan="7" class="text-center">
                Không tìm thấy sản phẩm nào phù hợp với điều kiện tìm kiếm.
              </td>
            </tr>`;
          return;
        }
  
        items.forEach((product) => {
          // Tạo một hàng mới cho bảng
          const row = document.createElement("tr");
  
          // Tạo ô checkbox
          const checkboxCell = document.createElement("td");
          checkboxCell.innerHTML = `
            <div class="form-check ms-1">
              <input type="checkbox" class="form-check-input" id="product-${product.id}">
              <label class="form-check-label" for="product-${product.id}">&nbsp;</label>
            </div>
          `;
  
          // Tạo ô thông tin sản phẩm
          const productInfoCell = document.createElement("td");
          productInfoCell.innerHTML = `
            <div class="d-flex align-items-center gap-2">
              <div class="rounded bg-light avatar-md d-flex align-items-center justify-content-center">
                <img src="${url.baseUrl}/img/Products/${product.imageUrl}" alt="" class="avatar-md" onerror="this.src='/custom/no-image.webp'">
              </div>
              <div>
                <a href="#!" class="text-dark fw-medium fs-15">${product.name}</a>
                <p class="text-muted mb-0 mt-1 fs-13">
                  <span>Xuất xứ: </span>${product.origin || "Không có thông tin"}
                  <br>
                  <span>Đơn vị: </span>${this.units[product.unit] || "Không có thông tin"}
                </p>
              </div>
            </div>
          `;
  
          // Tạo ô giá
          const priceCell = document.createElement("td");
          priceCell.textContent = new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
          }).format(product.price);
  
          // Tạo ô tồn kho
          const stockCell = document.createElement("td");
          stockCell.innerHTML = `
            <p class="mb-1 text-muted">
              <span class="text-dark fw-medium">${product.stockQuantity} ${
            this.units[product.unit] || "đvt"
          }</span> 
            </p>
          `;
  
          // Tạo ô danh mục
          const categoryCell = document.createElement("td");
          categoryCell.textContent = this.getCategoryName(product.categoryId);
  
          // Tạo ô đánh giá
          const ratingCell = document.createElement("td");
          ratingCell.innerHTML = `
            <a class="badge p-1 bg-light text-dark fs-12 me-1" href="/Admin/ProductReview?id=${product.id}">
              <i class="bx bxs-star align-text-top fs-14 text-warning me-1"></i>
              ${product.averageRating?.toFixed(1) || "N/A"}
            </a>
            ${product.reviewCount || 0} Đánh giá
          `;
  
          // Tạo ô thao tác
          const actionCell = document.createElement("td");
          actionCell.innerHTML = `
            <div class="d-flex gap-2">
              <a href="@Url.Action("ProductDetail", "Admin", new { id = 3 })" class="btn btn-light btn-sm view-product" data-id="${product.id}">
                <iconify-icon icon="solar:eye-broken" class="align-middle fs-18"></iconify-icon>
              </a>
              <a href="/Admin/ProductEdit?id=${product.id}" class="btn btn-soft-primary btn-sm edit-product" data-id="${product.id}">
                <iconify-icon icon="solar:pen-2-broken" class="align-middle fs-18"></iconify-icon>
              </a>
              <a href="#!" class="btn btn-soft-danger btn-sm delete-product" data-id="${product.id}">
                <iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon>
              </a>
            </div>
          `;
  
          // Thêm các ô vào hàng
          row.appendChild(checkboxCell);
          row.appendChild(productInfoCell);
          row.appendChild(priceCell);
          row.appendChild(stockCell);
          row.appendChild(categoryCell);
          row.appendChild(ratingCell);
          row.appendChild(actionCell);
  
          // Thêm hàng vào bảng
          tableBody.appendChild(row);
        });
  
        // Thêm sự kiện cho các nút trong bảng
        this.addTableEventListeners();
      },
  
      getCategoryName: function (categoryId) {
        const category = this.categories.find((c) => c.id === categoryId);
        return category ? category.name : "Không phân loại";
      },
  
      addTableEventListeners: function () {
        // Sự kiện cho nút xem chi tiết
        document.querySelectorAll(".view-product").forEach((button) => {
          button.addEventListener("click", (e) => {
            e.preventDefault();
            const productId = button.getAttribute("data-id");
            window.location.href = `/Admin/ProductDetail?id=${productId}`;
          });
        });
  
        // Sự kiện cho nút sửa
        document.querySelectorAll(".edit-product").forEach((button) => {
          button.addEventListener("click", (e) => {
            e.preventDefault();
            const productId = button.getAttribute("data-id");
            window.location.href = `/Admin/ProductEdit?id=${productId}`;
          });
        });
  
        // Sự kiện cho nút xóa
        document.querySelectorAll(".delete-product").forEach((button) => {
          button.addEventListener("click", (e) => {
            e.preventDefault();
            const productId = button.getAttribute("data-id");
  
            if (confirm("Bạn có chắc chắn muốn xóa sản phẩm này?")) {
              productService
                .delete(productId)
                .then((response) => {
                  if (response && response.success) {
                    alert("Xóa sản phẩm thành công!");
                    this.applyFilter(); // Tải lại danh sách
                  } else {
                    alert(
                      "Xóa sản phẩm thất bại: " +
                        (response.message || "Không rõ lỗi")
                    );
                  }
                })
                .catch((error) => {
                  console.error("Lỗi khi xóa sản phẩm:", error);
                  alert("Đã xảy ra lỗi khi xóa sản phẩm. Vui lòng thử lại sau.");
                });
            }
          });
        });
      },
    };
    
    const appStore = {
        init: function(storeId){
            this.storeId = storeId;
            this.loadStoreInfo();
        },
        loadStoreInfo: function(){
            storeService.getById(this.storeId)
                .then(response => {
                    if(response && response.success && response.data) {
                        const store = response.data;
                        console.log(store);
                        
                        // Cập nhật thông tin cửa hàng
                        document.querySelector('.card-body .flex-grow-1 h4').textContent = store.name;
                        document.querySelector('.card-body .flex-grow-1 p:nth-child(2)').innerHTML = 
                            `<i class="bx bx-map-pin me-1"></i>${store.address || 'Chưa cập nhật địa chỉ'}`;
                        document.querySelector('.card-body .flex-grow-1 p:nth-child(3)').innerHTML = 
                            `<i class="bx bx-phone me-1"></i>${store.phoneNumber || 'Chưa cập nhật SĐT'}`;
                        
                        // Cập nhật avatar cửa hàng
                        const avatarImg = document.querySelector('.card-body .flex-shrink-0 img');
                        if(store.logoUrl) {
                            avatarImg.src = `${url.baseUrl}/img/Stores/${store.logoUrl}`;
                            avatarImg.onerror = function() {
                                this.src = '/custom/default.jpg';
                            }
                        }
                        
                        // Cập nhật thông tin đánh giá
                        @* document.querySelector('.col-md-6:nth-child(1) h5').innerHTML = 
                            `${store.averageRating ? store.averageRating.toFixed(1) : 'N/A'} <i class="bx bxs-star text-warning"></i>`; *@
                        
                        // Cập nhật loại shop
                        enumService.getShopTypes().then(response => {
                            if(response) {
                                const shopType = response[store.businessType];
                                document.querySelector('#shop-type').textContent = shopType ?? 'Lỗi XĐ loại shop';
                            }
                        });
                        // Cập nhật thời gian phản hồi (không có trong dữ liệu API, giữ nguyên giá trị mặc định)
                        
                        // Cập nhật ngày tham gia
                        if(store.createdAt) {
                            const createdDate = new Date(store.createdAt);
                            const formattedDate = createdDate.toLocaleDateString('vi-VN');
                            document.querySelector('#date-joined').textContent = formattedDate;
                        }
                        
                        // Cập nhật số lượng đánh giá
                        @* if(store.reviewCount !== null && store.reviewCount !== undefined) {
                            const ratingElement = document.querySelector('.col-md-6:nth-child(1) p');
                            if(ratingElement) {
                                ratingElement.textContent = `Đánh Giá Shop (${store.reviewCount} lượt)`;
                            }
                        } *@
                    } else {
                        console.error("Không thể tải thông tin cửa hàng:", response?.message || "Dữ liệu không hợp lệ");
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi lấy thông tin cửa hàng:", error);
                });
        }
    }

    // Lấy storeId từ tham số URL
    const urlParams = new URLSearchParams(window.location.search);
    const storeId = urlParams.get('id');
    // Kiểm tra nếu không có storeId trong URL
    if (!storeId) {
      console.error("Không tìm thấy id trong URL");
      // Chuyển hướng người dùng về trang index nếu không có storeId
      window.location.href = "/Admin/Index";
      // Hiển thị thông báo lỗi (nếu người dùng không bị chuyển hướng ngay lập tức)
      document.body.innerHTML = `
        <div class="alert alert-danger text-center m-5" role="alert">
          <i class="bx bx-error-circle fs-3 me-2"></i> Không tìm thấy thông tin cửa hàng. Đang chuyển hướng... 🥺👉👈
        </div>
      `;
    }else{
        appProduct.init(parseInt(storeId));
        appStore.init(parseInt(storeId));
    }
  </script>
