
@{
    Layout = "_LayoutAdmin";
}

<div class="page-content">
  <!-- Start Container Fluid -->
  <div class="container-fluid">
    <div class="row">
      <div class="col-xl-12">
        <div class="card">
          <div
            class="card-header d-flex justify-content-between align-items-center gap-1"
          >
            <h4 class="card-title flex-grow-1">Danh Sách Phiếu Giảm Giá</h4>

            <a asp-action="DiscountAdd" asp-controller="Admin" class="btn btn-sm btn-primary">
              <i class="bx bx-plus me-1"></i>Thêm Phiếu Giảm Giá
            </a>
          </div>
          <div class="card-body">
            <!-- Thêm bộ tìm kiếm và lọc -->
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="input-group">
                  <input
                    type="text"
                    class="form-control"
                    placeholder="Tìm kiếm phiếu giảm giá..."
                    id="discount-search-input"
                  />
                  <button class="btn btn-primary" type="button" id="discount-search-button">
                    <i class="bx bx-search"></i>
                  </button>
                </div>
              </div>
              <div class="col-md-6 text-end">
                <button
                  type="button"
                  class="btn btn-outline-secondary me-1"
                  data-bs-toggle="modal"
                  data-bs-target="#filterModal"
                >
                  <i class="bx bx-filter-alt me-1"></i> Lọc
                </button>
                <button type="button" class="btn btn-outline-danger me-1" id="reset-filter-button">
                  <i class="bx bx-reset me-1"></i> Reset
                </button>
              </div>
            </div>
            <div class="table-responsive">
              <table class="table align-middle mb-0 table-hover table-centered">
                <thead class="bg-light-subtle">
                  <tr>
                    <th style="width: 20px">
                      <div class="form-check ms-1">
                        <input
                          type="checkbox"
                          class="form-check-input"
                          id="select-all-checkbox"
                        />
                        <label
                          class="form-check-label"
                          for="customCheck1"
                        ></label>
                      </div>
                    </th>
                    <th>Mã Code</th>
                    <th>Mô Tả</th>
                    <th>Loại</th>
                    <th>Giá Trị</th>
                    <th>Thời Gian</th>
                    <th>Trạng Thái</th>
                    <th>Thao Tác</th>
                  </tr>
                </thead>
                <tbody id="discount-table-body">
                  <!-- JavaScript sẽ tạo ra các dòng dữ liệu tại đây -->
                </tbody>
              </table>
            </div>
            <!-- end table-responsive -->
          </div>
          <div class="card-footer border-top">
            <div id="paging-count"></div>
            <nav aria-label="Page navigation example">
              <ul class="pagination justify-content-end mb-0" id="paging-list">
                <li class="page-item">
                  <a class="page-link" href="javascript:void(0);" id="btn-prev">Trước</a>
                </li>
                <li class="page-item active">
                  <a class="page-link" href="javascript:void(0);">1</a>
                </li>
                <li class="page-item">
                  <a class="page-link" href="javascript:void(0);">2</a>
                </li>
                <li class="page-item">
                  <a class="page-link" href="javascript:void(0);">3</a>
                </li>
                <li class="page-item">
                  <a class="page-link" href="javascript:void(0);" id="btn-next">Sau</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- End Container Fluid -->

  <!-- ========== Footer Start ========== -->
  <footer class="footer">
    <div class="container-fluid">
      <div class="row">
        <div class="col-12 text-center">
          &copy; Hệ Thống Quản Lý Nông Sản VNFarm. All rights reserved.
        </div>
      </div>
    </div>
  </footer>
  <!-- ========== Footer End ========== -->
</div>

<!-- Modal Lọc -->
<div
  class="modal fade"
  id="filterModal"
  tabindex="-1"
  aria-labelledby="filterModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="filterModalLabel">Lọc Phiếu Giảm Giá</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label class="form-label">Loại Giảm Giá</label>
            <select class="form-select" id="discount-type-filter">
              <option value="-999">Tất cả</option>
              <option value="0">Phần trăm</option>
              <option value="1">Số tiền cố định</option>
              <option value="2">Miễn phí vận chuyển</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Trạng Thái</label>
            <select class="form-select" id="status-filter">
              <option value="-999">Tất cả</option>
              <option value="0">Đang hoạt động</option>
              <option value="1">Không hoạt động</option>
            </select>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Thời Gian</label>
            <div class="row">
              <div class="col-6">
                <label class="form-label">Từ ngày</label>
                <input type="date" class="form-control" id="start-date-filter" />
              </div>
              <div class="col-6">
                <label class="form-label">Đến ngày</label>
                <input type="date" class="form-control" id="end-date-filter" />
              </div>
            </div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Cửa Hàng</label>
            <select class="form-select" id="store-filter">
              <option value="-999">Tất cả</option>
              <!-- JavaScript sẽ thêm các option tại đây -->
            </select>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Sắp Xếp Theo</label>
            <select class="form-select" id="sort-by-filter">
              <option value="0">Mặc định (Mới nhất)</option>
              <option value="1">Cũ nhất</option>
              <option value="2">Giá trị tăng dần</option>
              <option value="3">Giá trị giảm dần</option>
              <option value="4">Ngày hết hạn gần nhất</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">
          Hủy
        </button>
        <button type="button" class="btn btn-primary" id="apply-filter-button">Áp Dụng</button>
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { BaseService } from "/custom/BaseService.js";
  import { SortType } from "/custom/Enum.js";
  import { EnumService } from "/custom/EnumService.js";
  import Toast from "/Custom/Toast_Seller.js";
  import key from "/Custom/jwt.js";
  import url from "/Custom/endpoints.js";

  const jwt = key;
  const enumService = new EnumService(url.baseUrl, jwt);
  const discountUrl = url.base + "/Discount";
  const discountService = new BaseService(discountUrl, jwt);
  const storeUrl = url.base + "/Store";
  const storeService = new BaseService(
    storeUrl,
    jwt
  );

  const appDiscount = {
    filter: {
      searchTerm: "",
      sortBy: 0, // Mặc định
      page: 1,
      pageSize: 10,
      status: -999, // Tất cả
      type: -999, // Tất cả
      startDate: null,
      endDate: null,
      storeId: -999 // Tất cả
    },
    appliedFilters: {},
    stores: [],
    
    init: function () {
      this.loadStores();
      this.handleFilterFunction();
      this.handleResetFilter();
      this.handleApplyFilter();
      this.handleSearchFunction();
      this.handlePagingFunction();
      this.handleSelectAll();
      this.initializeFilters();

      // Tải dữ liệu ban đầu
      this.applyFilter();
    },

    initializeFilters: function () {
      // Khởi tạo giá trị mặc định cho các bộ lọc
      this.updateAppliedFiltersDisplay();
    },

    applyFilter: function () {
      const _this = this;

      discountService
        .find(_this.filter)
        .then((response) => {
          console.log("Discount response :", response);
          let data = response.data || [];
          if (data.length > 0) {
            const items = data || [];
            _this.reloadTable(items);

            // Cập nhật phân trang
            const start = (_this.filter.page - 1) * _this.filter.pageSize + 1;
            const end = start + items.length - 1;
            const totalCount = response.totalCount || 0;

            document.getElementById(
              "paging-count"
            ).textContent = `Hiển thị ${start} - ${end}/${totalCount} phiếu giảm giá`;

            // Cập nhật danh sách phân trang
            const pagingList = document.getElementById("paging-list");
            pagingList.innerHTML = `
              <li class="page-item" id="btn-prev">
                <a href="#" class="page-link"><i class="bx bx-left-arrow-alt"></i></a>
              </li>`;

            const totalPages = Math.ceil(totalCount / _this.filter.pageSize);

            for (let i = 1; i <= totalPages; i++) {
              const li = document.createElement("li");
              li.classList.add("page-item");

              if (i === _this.filter.page) {
                li.classList.add("active");
              }

              li.addEventListener("click", () => {
                _this.filter.page = i;
                _this.applyFilter();
              });

              const a = document.createElement("a");
              a.classList.add("page-link");
              a.textContent = i;
              a.href = "#";

              li.appendChild(a);
              pagingList.appendChild(li);
            }

            pagingList.innerHTML += `
              <li class="page-item" id="btn-next">
                <a href="#" class="page-link"><i class="bx bx-right-arrow-alt"></i></a>
              </li>`;

            // Vô hiệu hóa nút Prev nếu đang ở trang đầu tiên
            if (_this.filter.page === 1) {
              document.getElementById("btn-prev").classList.add("disabled");
            }

            // Vô hiệu hóa nút Next nếu đang ở trang cuối cùng
            if (_this.filter.page === totalPages) {
              document.getElementById("btn-next").classList.add("disabled");
            }
          } else {
            // Hiển thị thông báo lỗi
            document.getElementById("discount-table-body").innerHTML = `
              <tr>
                <td colspan="8" class="text-center text-secondary">
                  Không có phiếu giảm giá nào.
                </td>
              </tr>`;

            document.getElementById("paging-count").textContent =
              "Không có dữ liệu";
          }
        })
        .catch((error) => {
          console.error("Error retrieving discounts:", error);
          document.getElementById("discount-table-body").innerHTML = `
            <tr>
              <td colspan="8" class="text-center text-danger">
                Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.
              </td>
            </tr>`;

          document.getElementById("paging-count").textContent = "Đã xảy ra lỗi";
        });
    },

    loadStores: function () {
      // Load cửa hàng vào dropdown
      const storeDropdown = document.getElementById("store-filter");
      storeDropdown.innerHTML =
        "<option value='-999' selected>Tất cả</option>";

      storeService
        .getAll()
        .then((data) => {
          if (data && data.success) {
            const items = data.data || [];
            this.stores = items;

            items.forEach((item) => {
              const option = document.createElement("option");
              option.value = item.id;
              option.textContent = item.name;
              storeDropdown.appendChild(option);
            });
          }
        })
        .catch((error) => {
          console.error("Error retrieving stores:", error);
        });
    },

    handleFilterFunction: function () {
      // Sự kiện khi bấm nút lọc trên giao diện chính
      const filterButton = document.querySelector(
        "[data-bs-target='#filterModal']"
      );
      const _this = this;

      filterButton.addEventListener("click", () => {
        // Cập nhật các giá trị trong modal filter từ filter hiện tại
        _this.updateFilterModal();
      });
    },

    updateFilterModal: function () {
      // Cập nhật giá trị trong modal từ filter hiện tại
      const typeDropdown = document.getElementById("discount-type-filter");
      const statusDropdown = document.getElementById("status-filter");
      const startDateInput = document.getElementById("start-date-filter");
      const endDateInput = document.getElementById("end-date-filter");
      const storeDropdown = document.getElementById("store-filter");
      const sortByDropdown = document.getElementById("sort-by-filter");

      // Đặt giá trị cho từng trường
      typeDropdown.value = this.filter.type;
      statusDropdown.value = this.filter.status;
      
      if (this.filter.startDate) {
        startDateInput.value = this.filter.startDate.substring(0, 10);
      }
      
      if (this.filter.endDate) {
        endDateInput.value = this.filter.endDate.substring(0, 10);
      }
      
      if (this.filter.storeId !== -999) {
        storeDropdown.value = this.filter.storeId;
      } else {
        storeDropdown.value = -999;
      }

      // Cập nhật sort by
      sortByDropdown.value = this.filter.sortBy;
    },

    handleResetFilter: function () {
      const resetButton = document.getElementById("reset-filter-button");
      const _this = this;

      resetButton.addEventListener("click", () => {
        // Reset filter về giá trị mặc định
        _this.filter = {
          searchTerm: "",
          sortBy: 0,
          page: 1,
          pageSize: 10,
          status: -999,
          type: -999,
          startDate: null,
          endDate: null,
          storeId: -999
        };

        // Reset ô tìm kiếm
        document.getElementById("discount-search-input").value = "";

        // Cập nhật lại UI
        _this.updateAppliedFiltersDisplay();
        _this.applyFilter();
      });
    },

    handleApplyFilter: function () {
      const applyButton = document.getElementById("apply-filter-button");
      const _this = this;

      applyButton.addEventListener("click", () => {
        // Lấy giá trị từ các trường trong modal
        const typeValue = document.getElementById("discount-type-filter").value;
        const statusValue = document.getElementById("status-filter").value;
        const startDateValue = document.getElementById("start-date-filter").value;
        const endDateValue = document.getElementById("end-date-filter").value;
        const storeIdValue = document.getElementById("store-filter").value;
        const sortByValue = document.getElementById("sort-by-filter").value;

        // Cập nhật filter
        _this.filter.type = parseInt(typeValue);
        _this.filter.status = parseInt(statusValue);
        _this.filter.startDate = startDateValue ? startDateValue : null;
        _this.filter.endDate = endDateValue ? endDateValue : null;
        _this.filter.storeId = parseInt(storeIdValue);
        _this.filter.sortBy = parseInt(sortByValue);

        // Reset trang về 1
        _this.filter.page = 1;

        // Đóng modal
        const filterModal = bootstrap.Modal.getInstance(
          document.getElementById("filterModal")
        );
        filterModal.hide();

        // Cập nhật hiển thị bộ lọc đã áp dụng
        _this.updateAppliedFiltersDisplay();

        // Áp dụng bộ lọc
        _this.applyFilter();
      });
    },

    updateAppliedFiltersDisplay: function () {
      // Không cần code vì đã tạo static trong HTML
    },

    handleSearchFunction: function () {
      const searchInput = document.getElementById("discount-search-input");
      const searchButton = document.getElementById("discount-search-button");
      const _this = this;

      // Xử lý khi nhấn nút tìm kiếm
      searchButton.addEventListener("click", () => {
        _this.filter.searchTerm = searchInput.value;
        _this.filter.page = 1; // Reset về trang 1
        _this.updateAppliedFiltersDisplay();
        _this.applyFilter();
      });

      // Xử lý khi nhấn Enter trong ô tìm kiếm
      searchInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          _this.filter.searchTerm = searchInput.value;
          _this.filter.page = 1; // Reset về trang 1
          _this.updateAppliedFiltersDisplay();
          _this.applyFilter();
          e.preventDefault();
        }
      });
    },

    handlePagingFunction: function () {
      const _this = this;

      // Sự kiện cho nút Previous
      document.addEventListener("click", function (e) {
        if (
          e.target.closest("#btn-prev") &&
          !e.target.closest("#btn-prev").classList.contains("disabled")
        ) {
          e.preventDefault();
          if (_this.filter.page > 1) {
            _this.filter.page--;
            _this.applyFilter();
          }
        }
      });

      // Sự kiện cho nút Next
      document.addEventListener("click", function (e) {
        if (
          e.target.closest("#btn-next") &&
          !e.target.closest("#btn-next").classList.contains("disabled")
        ) {
          e.preventDefault();
          _this.filter.page++;
          _this.applyFilter();
        }
      });
    },

    handleSelectAll: function () {
      const selectAllCheckbox = document.getElementById("select-all-checkbox");

      selectAllCheckbox.addEventListener("change", () => {
        const isChecked = selectAllCheckbox.checked;
        const checkboxes = document.querySelectorAll(
          "#discount-table-body .form-check-input"
        );

        checkboxes.forEach((checkbox) => {
          checkbox.checked = isChecked;
        });
      });
    },

    reloadTable: function (items) {
      const tableBody = document.getElementById("discount-table-body");
      tableBody.innerHTML = "";

      if (!items || items.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="8" class="text-center">
              Không tìm thấy phiếu giảm giá nào phù hợp với điều kiện tìm kiếm.
            </td>
          </tr>`;
        return;
      }

      items.forEach((discount) => {
        // Tạo một hàng mới cho bảng
        const row = document.createElement("tr");

        // Tạo ô checkbox
        const checkboxCell = document.createElement("td");
        checkboxCell.innerHTML = `
          <div class="form-check ms-1">
            <input type="checkbox" class="form-check-input" id="discount-${discount.id}">
            <label class="form-check-label" for="discount-${discount.id}">&nbsp;</label>
          </div>
        `;

        // Tạo ô mã code
        const codeCell = document.createElement("td");
        codeCell.innerHTML = `
          <div class="d-flex align-items-center">
            <span class="badge bg-primary-subtle text-primary fw-medium p-2">${discount.code}</span>
          </div>
        `;

        // Tạo ô mô tả
        const descCell = document.createElement("td");
        descCell.textContent = discount.description || "Không có mô tả";

        // Tạo ô loại giảm giá
        const typeCell = document.createElement("td");
        let typeText = "Không xác định";
        if (discount.type === 0) typeText = "Phần trăm";
        else if (discount.type === 1) typeText = "Số tiền cố định";
        else if (discount.type === 2) typeText = "Miễn phí vận chuyển";
        typeCell.textContent = typeText;

        // Tạo ô giá trị
        const valueCell = document.createElement("td");
        if (discount.type === 0) {
          valueCell.innerHTML = `${discount.discountAmount}% <small>(Tối đa ${new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
          }).format(discount.maximumDiscountAmount)})</small>`;
        } else if (discount.type === 1) {
          valueCell.textContent = new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
          }).format(discount.discountAmount);
        } else {
          valueCell.textContent = "Miễn phí vận chuyển";
        }

        // Tạo ô thời gian
        const timeCell = document.createElement("td");
        const startDate = new Date(discount.startDate).toLocaleDateString('vi-VN');
        const endDate = new Date(discount.endDate).toLocaleDateString('vi-VN');
        timeCell.innerHTML = `
          <div>
            <div class="text-success">Bắt đầu: ${startDate}</div>
            <div class="text-danger">Kết thúc: ${endDate}</div>
          </div>
        `;

        // Tạo ô trạng thái
        const statusCell = document.createElement("td");
        let statusClass = discount.status === 0 ? "success" : "danger";
        let statusText = discount.status === 0 ? "Đang hoạt động" : "Không hoạt động";
        
        // Kiểm tra thêm nếu đã hết hạn
        const now = new Date();
        const expiry = new Date(discount.endDate);
        if (expiry < now) {
          statusClass = "warning";
          statusText = "Đã hết hạn";
        }
        
        statusCell.innerHTML = `<span class="badge bg-${statusClass}-subtle text-${statusClass} px-2 py-1">${statusText}</span>`;

        // Tạo ô thao tác
        const actionCell = document.createElement("td");
        actionCell.innerHTML = `
          <div class="d-flex gap-2">
            <a href="/Admin/DiscountEdit?id=${discount.id}" class="btn btn-soft-primary btn-sm">
              <iconify-icon icon="solar:pen-2-broken" class="align-middle fs-18"></iconify-icon>
            </a>
            <a href="#!" class="btn btn-soft-danger btn-sm delete-discount" data-id="${discount.id}">
              <iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon>
            </a>
          </div>
        `;

        // Thêm các ô vào hàng
        row.appendChild(checkboxCell);
        row.appendChild(codeCell);
        row.appendChild(descCell);
        row.appendChild(typeCell);
        row.appendChild(valueCell);
        row.appendChild(timeCell);
        row.appendChild(statusCell);
        row.appendChild(actionCell);

        // Thêm hàng vào bảng
        tableBody.appendChild(row);
      });

      // Thêm sự kiện cho các nút trong bảng
      this.addTableEventListeners();
    },

    getStoreName: function (storeId) {
      if (!storeId) return "Toàn hệ thống";
      const store = this.stores.find((s) => s.id === storeId);
      return store ? store.name : "Không xác định";
    },

    addTableEventListeners: function () {
      // Sự kiện cho nút xóa
      document.querySelectorAll(".delete-discount").forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const discountId = button.getAttribute("data-id");

          if (confirm("Bạn có chắc chắn muốn xóa phiếu giảm giá này?")) {
            discountService
              .delete(discountId)
              .then((response) => {
                if (response && response.success) {
                  Toast.success("Xóa phiếu giảm giá thành công!");
                  this.applyFilter(); // Tải lại danh sách
                } else {
                  Toast.error(
                    "Xóa phiếu giảm giá thất bại: " +
                      (response.message || "Không rõ lỗi")
                  );
                }
              })
              .catch((error) => {
                console.error("Lỗi khi xóa phiếu giảm giá:", error);
                Toast.error("Đã xảy ra lỗi khi xóa phiếu giảm giá. Vui lòng thử lại sau.");
              });
          }
        });
      });
    },
  };
  
  // Khởi tạo ứng dụng
  appDiscount.init();
</script> 