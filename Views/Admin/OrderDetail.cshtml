@{
    Layout = "_LayoutAdmin";
}

<!-- Thêm style để hiển thị loading state -->
<style>
  .loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .card {
    position: relative;
  }

  .fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }

  @@keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<div class="page-content">
  <!-- Start Container -->
  <div class="container-xxl">
    <div class="row">
      <div class="col-xl-9 col-lg-8">
        <div class="row">
          <div class="col-lg-12">
            <div class="card">
              <div class="card-body">
                <div
                  class="d-flex flex-wrap align-items-center justify-content-between gap-2"
                >
                  <div>
                    <h4
                      class="fw-medium text-dark d-flex align-items-center gap-2"
                    >
                      <span id="order-code">Đang tải...</span>
                      <span
                        id="payment-status-badge"
                        class="badge bg-success-subtle text-success px-2 py-1 fs-13"
                        >Đang tải...</span
                      >
                      <span
                        id="order-status-badge"
                        class="border border-warning text-warning fs-13 px-2 py-1 rounded"
                        >Đang tải...</span
                      >
                    </h4>
                    <p class="mb-0">
                      Đơn Hàng / Chi Tiết Đơn /
                      <span id="order-date-time">Đang tải...</span>
                    </p>
                  </div>
                  <div>
                    <button id="update-status-btn" class="btn btn-warning">
                      Cập Nhật Trạng Thái
                    </button>
                    <button id="update-shipping-btn" class="btn btn-info">
                      Chỉnh Sửa Vận Chuyển
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="card">
              <div class="card-header">
                <h4 class="card-title">Sản Phẩm</h4>
              </div>
              <div class="card-body">
                <div class="table-responsive">
                  <table
                    class="table align-middle mb-0 table-hover table-centered"
                  >
                    <thead class="bg-light-subtle border-bottom">
                      <tr>
                        <th>Tên Sản Phẩm & Kích Thước</th>
                        <th>Trạng Thái</th>
                        <th>Số Lượng</th>
                        <th>Giá</th>
                        <th>Phí Vận Chuyển</th>
                        <th>Tổng</th>
                      </tr>
                    </thead>
                    <tbody id="order-items">
                      <!-- Sản phẩm sẽ được tạo bởi JavaScript -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <div class="card">
              <div class="card-header">
                <h4 class="card-title">Lịch sử đơn hàng</h4>
              </div>
              <div class="card-body">
                <div class="position-relative ms-2" id="order-timeline">
                  <span
                    class="position-absolute start-0 top-0 border border-dashed h-100"
                  ></span>
                  <!-- Timeline sẽ được tạo bởi JavaScript -->
                </div>
              </div>
            </div>
            <div class="card bg-light-subtle">
              <div class="card-body">
                <div class="row g-3 g-lg-0">
                  <div class="col-lg-3 border-end">
                    <div
                      class="d-flex align-items-center gap-3 justify-content-between px-3"
                    >
                      <div>
                        <p class="text-dark fw-medium fs-16 mb-1">
                          Nhà Cung Cấp
                        </p>
                        <p class="mb-0" id="store-name">Đang tải...</p>
                      </div>
                      <div
                        class="avatar bg-light d-flex align-items-center justify-content-center rounded"
                      >
                        <iconify-icon
                          icon="solar:shop-2-bold-duotone"
                          class="fs-35 text-primary"
                        ></iconify-icon>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-3 border-end">
                    <div
                      class="d-flex align-items-center gap-3 justify-content-between px-3"
                    >
                      <div>
                        <p class="text-dark fw-medium fs-16 mb-1">Ngày</p>
                        <p class="mb-0" id="order-date">Đang tải...</p>
                      </div>
                      <div
                        class="avatar bg-light d-flex align-items-center justify-content-center rounded"
                      >
                        <iconify-icon
                          icon="solar:calendar-date-bold-duotone"
                          class="fs-35 text-primary"
                        ></iconify-icon>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-3 border-end">
                    <div
                      class="d-flex align-items-center gap-3 justify-content-between px-3"
                    >
                      <div>
                        <p class="text-dark fw-medium fs-16 mb-1">
                          Thanh Toán Bởi
                        </p>
                        <p class="mb-0" id="buyer-name">Đang tải...</p>
                      </div>
                      <div
                        class="avatar bg-light d-flex align-items-center justify-content-center rounded"
                      >
                        <iconify-icon
                          icon="solar:user-circle-bold-duotone"
                          class="fs-35 text-primary"
                        ></iconify-icon>
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-3">
                    <div
                      class="d-flex align-items-center gap-3 justify-content-between px-3"
                    >
                      <div>
                        <p class="text-dark fw-medium fs-16 mb-1">
                          Mã Tham Chiếu
                        </p>
                        <p class="mb-0" id="reference-code">Đang tải...</p>
                      </div>
                      <div
                        class="avatar bg-light d-flex align-items-center justify-content-center rounded"
                      >
                        <iconify-icon
                          icon="solar:clipboard-text-bold-duotone"
                          class="fs-35 text-primary"
                        ></iconify-icon>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="card">
              <div class="card-header">
                <h4 class="card-title">Thông Tin Vận Chuyển</h4>
              </div>
              <div class="card-body" id="shipping-info">
                <!-- Nội dung sẽ được tạo bởi JavaScript -->
                <p class="text-muted">Đang tải thông tin vận chuyển...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-xl-3 col-lg-4">
        <div class="card">
          <div class="card-header">
            <h4 class="card-title">Tổng Kết Đơn Hàng</h4>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table mb-0">
                <tbody>
                  <tr>
                    <td class="px-0">
                      <p class="d-flex mb-0 align-items-center gap-1">
                        <iconify-icon
                          icon="solar:clipboard-text-broken"
                        ></iconify-icon>
                        Tạm Tính:
                      </p>
                    </td>
                    <td class="text-end text-dark fw-medium px-0" id="subtotal">
                      Đang tải...
                    </td>
                  </tr>
                  <tr>
                    <td class="px-0">
                      <p class="d-flex mb-0 align-items-center gap-1">
                        <iconify-icon
                          icon="solar:ticket-broken"
                          class="align-middle"
                        ></iconify-icon>
                        Giảm Giá:
                      </p>
                    </td>
                    <td class="text-end text-dark fw-medium px-0" id="discount">
                      Đang tải...
                    </td>
                  </tr>
                  <tr>
                    <td class="px-0">
                      <p class="d-flex mb-0 align-items-center gap-1">
                        <iconify-icon
                          icon="solar:kick-scooter-broken"
                          class="align-middle"
                        ></iconify-icon>
                        Phí Vận Chuyển:
                      </p>
                    </td>
                    <td
                      class="text-end text-dark fw-medium px-0"
                      id="shipping-fee"
                    >
                      Đang tải...
                    </td>
                  </tr>
                  <tr>
                    <td class="px-0">
                      <p class="d-flex mb-0 align-items-center gap-1">
                        <iconify-icon
                          icon="solar:calculator-minimalistic-broken"
                          class="align-middle"
                        ></iconify-icon>
                        Thuế:
                      </p>
                    </td>
                    <td class="text-end text-dark fw-medium px-0" id="tax">
                      Đang tải...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
          <div
            class="card-footer d-flex align-items-center justify-content-between bg-light-subtle"
          >
            <div>
              <p class="fw-medium text-dark mb-0">Tổng Cộng</p>
            </div>
            <div>
              <p class="fw-medium text-dark mb-0" id="final-total">
                Đang tải...
              </p>
            </div>
          </div>
        </div>
        <div class="card">
          <div class="card-header">
            <h4 class="card-title">Thông Tin Thanh Toán</h4>
          </div>
          <div class="card-body">
            <div class="d-flex align-items-center gap-3 mb-3">
              <div>
                <p class="mb-1 text-dark fw-medium" id="payment-method-name">
                  Đang tải...
                </p>
                <p class="mb-0 text-dark" id="payment-method-details">
                  xxxx xxxx xxxx xxxx
                </p>
              </div>
              <div class="ms-auto" id="payment-status-icon">
                <iconify-icon
                  icon="solar:check-circle-broken"
                  class="fs-22 text-success"
                ></iconify-icon>
              </div>
            </div>
            <p class="text-dark mb-1 fw-medium">
              Mã Đơn Hàng:
              <span class="text-muted fw-normal fs-13" id="transaction-id"
                >Đang tải...</span
              >
            </p>
            <p class="text-dark mb-0 fw-medium">
              Khách hàng:
              <span class="text-muted fw-normal fs-13" id="card-holder-name"
                >Đang tải...</span
              >
            </p>
          </div>
        </div>
        <div class="card">
          <div class="card-header">
            <h4 class="card-title">Thông Tin Khách Hàng</h4>
          </div>
          <div class="card-body">
            <div class="d-flex align-items-center gap-2">
              <img
                src="assets/images/users/avatar-1.jpg"
                alt=""
                id="customer-avatar"
                class="avatar rounded-3 border border-light border-3"
              />
              <div>
                <p class="mb-1" id="customer-name">Đang tải...</p>
                <a href="#!" class="link-primary fw-medium" id="customer-email"
                  >Đang tải...</a
                >
              </div>
            </div>
            
            <p class="mb-1" id="customer-phone">Đang tải...</p>

            <div class="d-flex justify-content-between mt-3">
              <h5 class="">Địa Chỉ Giao Hàng</h5>
              <div>
                <a href="#!"><i class="bx bx-edit-alt fs-18"></i></a>
              </div>
            </div>

            <div id="shipping-address">
              <p class="mb-1" id="shipping-name">Đang tải...</p>
              <p class="mb-1" id="shipping-address-line">Đang tải...</p>
              <p class="mb-1" id="shipping-city">Đang tải...</p>
              <p class="" id="shipping-phone">Đang tải...</p>
            </div>

            <div class="d-flex justify-content-between mt-3">
              <h5 class="">Địa Chỉ Thanh Toán</h5>
              <div>
                <a href="#!"><i class="bx bx-edit-alt fs-18"></i></a>
              </div>
            </div>

            <p class="mb-1" id="billing-address-info">
              Giống địa chỉ giao hàng
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal Cập Nhật Trạng Thái -->
<div class="modal fade" id="updateStatusModal" tabindex="-1" aria-labelledby="updateStatusModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateStatusModalLabel">Cập Nhật Trạng Thái Đơn Hàng</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="order-status-select" class="form-label">Trạng Thái Đơn Hàng</label>
          <select class="form-select" id="order-status-select">
            <!-- Options sẽ được thêm bằng JavaScript -->
          </select>
        </div>
        <div class="mb-3">
          <label for="payment-status-select" class="form-label">Trạng Thái Thanh Toán</label>
          <select class="form-select" id="payment-status-select">
            <!-- Options sẽ được thêm bằng JavaScript -->
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
        <button type="button" class="btn btn-primary" id="save-status-btn">Lưu Thay Đổi</button>
      </div>
    </div>
  </div>
</div>

<!-- Thêm Modal Chỉnh sửa thông tin vận chuyển -->
<div class="modal fade" id="updateShippingModal" tabindex="-1" aria-labelledby="updateShippingModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateShippingModalLabel">Chỉnh Sửa Thông Tin Vận Chuyển</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-6">
            <h6 class="mb-3">Thông tin vận chuyển</h6>
            <div class="mb-3">
              <label for="tracking-number" class="form-label">Mã vận đơn</label>
              <input type="text" class="form-control" id="tracking-number">
            </div>
            <div class="mb-3">
              <label for="shipping-method" class="form-label">Phương thức vận chuyển</label>
              <input type="text" class="form-control" id="shipping-method">
            </div>
            <div class="mb-3">
              <label for="shipping-partner" class="form-label">Đối tác vận chuyển</label>
              <input type="text" class="form-control" id="shipping-partner">
            </div>
            <div class="mb-3">
              <label for="shipped-at" class="form-label">Ngày gửi hàng</label>
              <input type="datetime-local" class="form-control" id="shipped-at">
            </div>
            <div class="mb-3">
              <label for="delivered-at" class="form-label">Ngày giao hàng</label>
              <input type="datetime-local" class="form-control" id="delivered-at">
            </div>
          </div>
          <div class="col-md-6">
            <h6 class="mb-3">Thông tin địa chỉ</h6>
            <div class="mb-3">
              <label for="shipping-name" class="form-label">Tên người nhận</label>
              <input type="text" class="form-control" id="shipping-name-input">
            </div>
            <div class="mb-3">
              <label for="shipping-phone" class="form-label">Số điện thoại</label>
              <input type="text" class="form-control" id="shipping-phone-input">
            </div>
            <div class="mb-3">
              <label for="shipping-address" class="form-label">Địa chỉ</label>
              <input type="text" class="form-control" id="shipping-address-input">
            </div>
            <div class="mb-3">
              <label for="shipping-province" class="form-label">Tỉnh/Thành phố</label>
              <input type="text" class="form-control" id="shipping-province-input">
            </div>
            <div class="mb-3">
              <label for="shipping-district" class="form-label">Quận/Huyện</label>
              <input type="text" class="form-control" id="shipping-district-input">
            </div>
            <div class="mb-3">
              <label for="shipping-ward" class="form-label">Phường/Xã</label>
              <input type="text" class="form-control" id="shipping-ward-input">
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
        <button type="button" class="btn btn-primary" id="save-shipping-btn">Lưu Thay Đổi</button>
      </div>
    </div>
  </div>
</div>

<!-- Loading overlay -->
<div id="loading-overlay" class="loading-overlay" style="display: none;">
  <div class="spinner-border text-primary" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
</div>

<script type="module">
  import { BaseService } from "/custom/BaseService.js";
  import { EnumService } from "/custom/EnumService.js";
  import key from "/Custom/jwt.js";
  import url from "/Custom/endpoints.js";

  // Khởi tạo services
  const jwt = key;
  const orderUrl = url.base + "/Order";
  const productUrl = url.base + "/Product";
  const enumService = new EnumService(url.baseUrl, jwt);
  const orderService = new BaseService(orderUrl, jwt);
  const productService = new BaseService(productUrl, jwt);

  // App quản lý chi tiết đơn hàng
  const orderDetailApp = {
    orderId: null,
    orderData: null,
    productsData: {}, // Lưu trữ thông tin sản phẩm theo productId
    
    // Enums
    statuses: {},
    paymentStatuses: {},
    paymentMethods: {},
    orderEventTypes: {},
    orderTimelineStatuses: {},
    
    // Hiển thị loading overlay
    showLoading: function(show) {
      const loadingOverlay = document.getElementById('loading-overlay');
      if (loadingOverlay) {
        loadingOverlay.style.display = show ? 'flex' : 'none';
      }
    },
    
    // Hiển thị thông báo lỗi
    showError: function(message) {
      console.error(message);
      alert(message);
    },
    
    // Format tiền tệ
    formatCurrency: function(amount) {
      return new Intl.NumberFormat('vi-VN').format(amount || 0);
    },
    
    // Format ngày
    formatDate: function(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      // Cộng thêm 7 giờ cho múi giờ Việt Nam
      date.setHours(date.getHours() + 7);
      return date.toLocaleDateString('vi-VN');
    },
    
    // Format thời gian
    formatTime: function(dateString) {
      if (!dateString) return '';
      const date = new Date(dateString);
      // Cộng thêm 7 giờ cho múi giờ Việt Nam
      date.setHours(date.getHours() + 7);
      return date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
    },
    
    // Khởi tạo ứng dụng
    init: async function() {
      try {
        // Lấy orderId từ URL
        const urlParams = new URLSearchParams(window.location.search);
        this.orderId = urlParams.get('orderCode');
        
        if (!this.orderId) {
          this.showError("Không tìm thấy mã đơn hàng trong URL");
          return;
        }
        
        // Hiển thị loading
        this.showLoading(true);
        
        // Tải các dữ liệu enum
        await Promise.all([
          this.loadOrderStatuses(),
          this.loadPaymentStatuses(),
          this.loadPaymentMethods(),
          this.loadOrderEventTypes(),
          this.loadOrderTimelineStatuses()
        ]);
        
        // Tải chi tiết đơn hàng
        await this.loadOrderDetail();

        // Tải thông tin sản phẩm sau khi đã có dữ liệu đơn hàng
        if (this.orderData && this.orderData.orderItems && this.orderData.orderItems.length > 0) {
          await this.loadProductsInfo();
        }
        
        // Thiết lập các event listeners
        this.setupEventListeners();
        
        this.showLoading(false);
      } catch (error) {
        console.error("Lỗi khởi tạo ứng dụng:", error);
        this.showError("Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.");
        this.showLoading(false);
      }
    },

    // Tải loại sự kiện đơn hàng
    loadOrderEventTypes: async function() {
      try {
        const response = await enumService.getOrderEventTypes();
        if (response) {
          console.log("Order Event Types:", response);
          this.orderEventTypes = response;
        }
      } catch (error) {
        console.error("Lỗi tải loại sự kiện đơn hàng:", error);
        this.orderEventTypes = {}; // Khởi tạo đối tượng rỗng để tránh lỗi
      }
    },

    // Tải trạng thái timeline đơn hàng
    loadOrderTimelineStatuses: async function() {
      try {
        const response = await enumService.getOrderTimelineStatuses();
        if (response) {
          console.log("Order Timeline Statuses:", response);
          this.orderTimelineStatuses = response;
        }
      } catch (error) {
        console.error("Lỗi tải trạng thái timeline đơn hàng:", error);
        this.orderTimelineStatuses = {}; // Khởi tạo đối tượng rỗng để tránh lỗi
      }
    },
    
    // Tải trạng thái đơn hàng
    loadOrderStatuses: async function () {
      try {
        const data = await enumService.getOrderStatuses();
        if (data) {
          console.log("Order Statuses:", data);
          this.statuses = data;
        }
      } catch (error) {
        console.error("Lỗi tải trạng thái đơn hàng:", error);
        this.statuses = {}; // Khởi tạo đối tượng rỗng để tránh lỗi
      }
    },

    // Tải trạng thái thanh toán
    loadPaymentStatuses: async function () {
      try {
        const data = await enumService.getPaymentStatuses();
        if (data && data.data) {
          console.log("Payment Statuses:", data.data);
          this.paymentStatuses = data.data;
        } else {
          this.paymentStatuses = {}; // Khởi tạo đối tượng rỗng nếu không có dữ liệu
        }
      } catch (error) {
        console.error("Lỗi tải trạng thái thanh toán:", error);
        this.paymentStatuses = {}; // Khởi tạo đối tượng rỗng để tránh lỗi
      }
    },

    // Tải phương thức thanh toán
    loadPaymentMethods: async function () {
      try {
        const data = await enumService.getPaymentMethods();
        if (data && data.success && data.data) {
          console.log("Payment Methods:", data.data);
          this.paymentMethods = data.data;
        } else {
          this.paymentMethods = {}; // Khởi tạo đối tượng rỗng nếu không có dữ liệu
        }
      } catch (error) {
        console.error("Lỗi tải phương thức thanh toán:", error);
        this.paymentMethods = {}; // Khởi tạo đối tượng rỗng để tránh lỗi
      }
    },

    // Tải thông tin sản phẩm
    loadProductsInfo: async function() {
      // Phương thức này sẽ được triển khai nếu cần tải thông tin sản phẩm bổ sung
      console.log("Thông tin sản phẩm đã được tải từ orderData");
    },

    // Tải chi tiết đơn hàng
    loadOrderDetail: async function () {
      try {
        const response = await orderService.getById(this.orderId);

        if (response && response.success && response.data) {
          console.log("Order Detail:", response.data);
          this.orderData = response.data;
          
          // Lưu thông tin sản phẩm từ response
          if (this.orderData.orderItems && this.orderData.orderItems.length > 0) {
            this.orderData.orderItems.forEach(item => {
              if (item.product) {
                this.productsData[item.productId] = item.product;
              }
            });
          }
          
          this.renderOrderDetail();
        } else {
          this.showError("Không thể tải thông tin đơn hàng");
        }
      } catch (error) {
        console.error("Lỗi tải chi tiết đơn hàng:", error);
        this.showError("Đã xảy ra lỗi khi tải chi tiết đơn hàng");
        throw error;
      }
    },

    // Hiển thị chi tiết đơn hàng
    renderOrderDetail: function () {
      const order = this.orderData;
      
      // Thông tin đơn hàng
      document.getElementById('order-code').textContent = order.orderCode;
      document.getElementById('reference-code').textContent = order.orderCode;
      
      // Thời gian đơn hàng
      const orderDate = this.formatDate(order.createdAt);
      const orderTime = this.formatTime(order.createdAt);
      document.getElementById('order-date-time').textContent = `${order.orderCode} - ${orderDate} lúc ${orderTime}`;
      document.getElementById('order-date').textContent = orderDate;
      
      // Trạng thái đơn hàng và thanh toán
      this.renderOrderStatus(order.status);
      this.renderPaymentStatus(order.paymentStatus);
      
      // Thông tin khách hàng
      this.renderCustomerInfo(order.buyer);
      
      // Thông tin vận chuyển
      this.renderShippingInfo();
      
      // Thông tin cửa hàng - Hiển thị thông tin từ shop của item đầu tiên nếu có
      if (order.orderItems && order.orderItems.length > 0 && order.orderItems[0].shop) {
        document.getElementById('store-name').textContent = order.orderItems[0].shop.name;
      } else {
        document.getElementById('store-name').textContent = 'Không có thông tin';
      }
      
      // Người thanh toán
      if (order.buyer) {
        document.getElementById('buyer-name').textContent = order.buyer.fullName;
      } else {
        document.getElementById('buyer-name').textContent = 'Không có thông tin';
      }
      
      // Hiển thị sản phẩm trong đơn hàng
      this.renderOrderItems();
      
      // Hiển thị lịch sử đơn hàng
      this.renderOrderTimeline();
      
      // Thông tin thanh toán
      this.renderPaymentInfo();
      
      // Tổng kết đơn hàng
      this.renderOrderSummary();
      
      // Hiển thị thông tin ghi chú nếu có
      const notesSection = document.getElementById('notes-section');
      if (notesSection) {
        if (order.notes && order.notes.trim() !== "") {
          document.getElementById('order-notes').textContent = order.notes;
          notesSection.style.display = 'block';
        } else {
          notesSection.style.display = 'none';
        }
      }
    },

    // Hiển thị trạng thái đơn hàng
    renderOrderStatus: function (status) {
      const statusBadge = document.getElementById("order-status-badge");
      const statusText = this.statuses[status] || "Không xác định";

      // Xác định class cho badge dựa vào trạng thái
      let badgeClass = "";
      switch (status) {
        case 0: // Chờ xác nhận
          badgeClass = "border border-secondary text-secondary";
          break;
        case 1: // Đang xử lý
          badgeClass = "border border-info text-info";
          break;
        case 2: // Đang đóng gói
          badgeClass = "border border-warning text-warning";
          break;
        case 3: // Đang vận chuyển
          badgeClass = "border border-primary text-primary";
          break;
        case 4: // Đã giao hàng
          badgeClass = "border border-success text-success";
          break;
        case 5: // Đã hoàn thành
          badgeClass = "border border-success text-success";
          break;
        case 6: // Đã hủy
          badgeClass = "border border-danger text-danger";
          break;
        case 7: // Đã hoàn tiền
          badgeClass = "border border-success text-success";
          break;
        default:
          badgeClass = "border border-secondary text-secondary";
      }

      statusBadge.className = `${badgeClass} px-2 py-1 rounded fs-13`;
      statusBadge.textContent = statusText;
    },

    // Hiển thị trạng thái thanh toán
    renderPaymentStatus: function (paymentStatus) {
      const paymentStatusBadge = document.getElementById(
        "payment-status-badge"
      );
      const statusText =
        this.paymentStatuses[paymentStatus] || "Không xác định";

      // Xác định class cho badge dựa vào trạng thái thanh toán
      let badgeClass = "";
      switch (paymentStatus) {
        case 1: // Chưa thanh toán
          badgeClass = "bg-light-subtle text-dark";
          break;
        case 2: // Thanh toán một phần
          badgeClass = "bg-warning-subtle text-warning";
          break;
        case 3: // Đã thanh toán
          badgeClass = "bg-success-subtle text-success";
          break;
        case 4: // Đã hoàn tiền
          badgeClass = "bg-success-subtle text-success";
          break;
        case 5: // Lỗi thanh toán
          badgeClass = "bg-danger-subtle text-danger";
          break;
        default:
          badgeClass = "bg-light-subtle text-dark";
      }

      paymentStatusBadge.className = `badge ${badgeClass} px-2 py-1 fs-13`;
      paymentStatusBadge.textContent = statusText;
    },

    // Hiển thị sản phẩm trong đơn hàng
    renderOrderItems: function() {
      const itemsContainer = document.getElementById('order-items');
      itemsContainer.innerHTML = '';
      
      // Nếu không có chi tiết đơn hàng
      if (!this.orderData.orderItems || this.orderData.orderItems.length === 0) {
        itemsContainer.innerHTML = `
          <tr>
            <td colspan="6" class="text-center">Không có sản phẩm nào trong đơn hàng</td>
          </tr>
        `;
        return;
      }
      
      // Hiển thị từng sản phẩm
      this.orderData.orderItems.forEach((item) => {
        const packagingStatus = this.getPackagingStatusBadge(item.packagingStatus);
        const product = item.product;
        
        const row = document.createElement('tr');
        
        // Nếu có thông tin sản phẩm, hiển thị thông tin chi tiết
        if (product) {
          row.innerHTML = `
            <td>
              <div class="d-flex align-items-center gap-2">
                <div class="rounded bg-light avatar-md d-flex align-items-center justify-content-center">
                  <img src="${url.baseUrl}/img/Products/${product.imageUrl}" alt="${product.name}" class="avatar-md" id="product-image-${product.id}">
                </div>
                <div>
                  <a href="#!" class="text-dark fw-medium fs-15">${product.name}</a>
                  <p class="text-muted mb-0 mt-1 fs-13">
                    <span>Kích thước: </span>${this.getUnitName(item.unit)}
                  </p>
                </div>
              </div>
            </td>
            <td>
              <span class="${packagingStatus.class}">${packagingStatus.text}</span>
            </td>
            <td>${item.quantity}</td>
            <td>${this.formatCurrency(item.unitPrice)}đ</td>
            <td>${this.formatCurrency(item.shippingFee)}đ</td>
            <td>${this.formatCurrency(item.subtotal)}đ</td>
          `;
        } else {
          // Hiển thị với thông tin tối thiểu nếu không có thông tin sản phẩm
          row.innerHTML = `
            <td>
              <div class="d-flex align-items-center gap-2">
                <div class="rounded bg-light avatar-md d-flex align-items-center justify-content-center">
                  <iconify-icon icon="solar:box-broken" class="fs-32 text-secondary"></iconify-icon>
                </div>
                <div>
                  <a href="#!" class="text-dark fw-medium fs-15">Sản phẩm #${item.productId}</a>
                  <p class="text-muted mb-0 mt-1 fs-13">
                    <span>Kích thước: </span>${this.getUnitName(item.unit)}
                  </p>
                </div>
              </div>
            </td>
            <td>
              <span class="${packagingStatus.class}">${packagingStatus.text}</span>
            </td>
            <td>${item.quantity}</td>
            <td>${this.formatCurrency(item.unitPrice)}đ</td>
            <td>${this.formatCurrency(item.shippingFee)}đ</td>
            <td>${this.formatCurrency(item.subtotal)}đ</td>
          `;
        }
        itemsContainer.appendChild(row);
      });
    },

    // Lấy trạng thái đóng gói sản phẩm
    getPackagingStatusBadge: function (status) {
      switch (status) {
        case 0:
          return {
            class: "badge bg-light text-dark px-2 py-1 fs-13",
            text: "Chờ xử lý",
          };
        case 1:
          return {
            class: "badge bg-primary-subtle text-primary px-2 py-1 fs-13",
            text: "Đang xử lý",
          };
        case 2:
          return {
            class: "badge bg-success-subtle text-success px-2 py-1 fs-13",
            text: "Đã đóng gói",
          };
        case 3:
          return {
            class: "badge bg-info-subtle text-info px-2 py-1 fs-13",
            text: "Đang vận chuyển",
          };
        case 4:
          return {
            class: "badge bg-success text-white px-2 py-1 fs-13",
            text: "Đã giao hàng",
          };
        case 5:
          return {
            class: "badge bg-danger-subtle text-danger px-2 py-1 fs-13",
            text: "Đã hủy",
          };
        case 6:
          return {
            class: "badge bg-warning-subtle text-warning px-2 py-1 fs-13",
            text: "Đã trả hàng",
          };
        default:
          return {
            class: "badge bg-light text-dark px-2 py-1 fs-13",
            text: "Không xác định",
          };
      }
    },

    // Lấy tên đơn vị
    getUnitName: function (unitCode) {
      const units = {
        1: "kg",
        2: "hộp",
        3: "cái",
        4: "gói",
        5: "túi",
        6: "thùng",
        7: "cuộn",
        8: "lít",
        9: "ml",
      };
      return units[unitCode] || "Không xác định";
    },

    // Hiển thị lịch sử đơn hàng
    renderOrderTimeline: function () {
      const timelineContainer = document.getElementById("order-timeline");
      timelineContainer.innerHTML =
        '<span class="position-absolute start-0 top-0 border border-dashed h-100"></span>';

      // Nếu không có dữ liệu timeline
      if (
        !this.orderData.orderTimelines ||
        this.orderData.orderTimelines.length === 0
      ) {
        // Tạo timeline mặc định dựa trên trạng thái hiện tại
        const currentStatus = this.orderData.status;
        const events = this.generateDefaultTimeline(currentStatus);

        events.forEach((event, index) => {
          const timelineItem = this.createTimelineItem(event, index === 0);
          timelineContainer.appendChild(timelineItem);
        });
      } else {
        // Hiển thị timeline từ dữ liệu API
        this.orderData.orderTimelines.forEach((event, index) => {
          let orderEvent = this.orderEventTypes[event.eventType];
          if(orderEvent == null)
          {
            orderEvent = {
              value: "Không xác định " + event.eventType,
              complete: false
            };
          }
          const timelineItem = this.createTimelineItem(
            {
              title: orderEvent.value,
              description: event.description,
              date: event.createdAt,
              isActive: index === 0,
              isCompleted: orderEvent.complete,
            },
            index === 0
          );

          timelineContainer.appendChild(timelineItem);
        });
      }
    },

    // Tạo timeline mặc định dựa trên trạng thái đơn hàng
    generateDefaultTimeline: function (currentStatus) {
      const events = [];
      const createdDate = new Date(this.orderData.createdAt);
      
      // Thêm sự kiện "đang xử lý" nếu đơn hàng đang trong quá trình xử lý
      if (currentStatus >= 1) {
        events.push({
          title: "Bắt đầu đóng gói",
          description: "Xác nhận bởi Nhân viên hệ thống",
          date: createdDate,
          isActive: currentStatus === 1,
          isCompleted: currentStatus > 1
        });
      }
      
      // Thêm sự kiện hóa đơn
      const invoiceDate = new Date(createdDate);
      invoiceDate.setMinutes(invoiceDate.getMinutes() + 5);
      
      events.push({
        title: "Đã gửi hóa đơn cho khách hàng",
        description: `Email hóa đơn đã gửi đến <a href="#!" class="link-primary">${this.orderData.buyer.email}</a>`,
        date: invoiceDate,
        isActive: false,
        isCompleted: true,
        showInvoiceButton: true
      });
      
      // Thêm sự kiện tạo hóa đơn
      const invoiceCreatedDate = new Date(invoiceDate);
      invoiceCreatedDate.setMinutes(invoiceCreatedDate.getMinutes() - 3);
      
      events.push({
        title: "Đã tạo hóa đơn",
        description: "Hóa đơn được tạo tự động bởi hệ thống",
        date: invoiceCreatedDate,
        isActive: false,
        isCompleted: true,
        showDownloadButton: true
      });
      
      // Thêm sự kiện thanh toán
      const paymentDate = new Date(invoiceCreatedDate);
      paymentDate.setMinutes(paymentDate.getMinutes() - 2);
      
      events.push({
        title: "Thanh Toán Đơn Hàng",
        description: `Sử dụng ${this.getPaymentMethodName(this.orderData.paymentMethod)}`,
        date: paymentDate,
        isActive: false,
        isCompleted: this.orderData.paymentStatus === 3,
        paymentStatus: this.orderData.paymentStatus
      });
      
      // Thêm sự kiện xác nhận đơn hàng
      const confirmDate = new Date(paymentDate);
      confirmDate.setMinutes(confirmDate.getMinutes() - 5);
      
      const itemCount = this.orderData.orderItems ? this.orderData.orderItems.length : 0;
      events.push({
        title: `${itemCount} sản phẩm được xác nhận bởi Hệ thống`,
        description: "",
        date: confirmDate,
        isActive: false,
        isCompleted: true,
        products: this.orderData.orderItems
      });
      
      return events;
    },

    // Tạo mục timeline
    createTimelineItem: function(event, isFirst) {
      const div = document.createElement('div');
      div.className = 'position-relative ps-4';
      
      let icon = '';
      if (event.isCompleted) {
        icon = `
          <span class="position-absolute start-0 avatar-sm translate-middle-x bg-light d-inline-flex align-items-center justify-content-center rounded-circle text-success fs-20">
            <i class='bx bx-check-circle'></i>
          </span>
        `;
      } else if (event.isActive) {
        icon = `
          <span class="position-absolute start-0 avatar-sm translate-middle-x bg-light d-inline-flex align-items-center justify-content-center rounded-circle">
            <div class="spinner-border spinner-border-sm text-warning" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </span>
        `;
      }
      
      let buttons = '';
      if (event.showInvoiceButton) {
        buttons = `<a href="#!" class="btn btn-light">Gửi Lại Hóa Đơn</a>`;
      } else if (event.showDownloadButton) {
        buttons = `<a href="#!" class="btn btn-primary">Tải Hóa Đơn</a>`;
      }
      
      let paymentStatus = '';
      if (event.paymentStatus !== undefined) {
        const status = this.paymentStatuses[event.paymentStatus] || 'Không xác định';
        let statusClass = 'bg-light text-dark';
        
        if (event.paymentStatus === 3) {
          statusClass = 'bg-success-subtle text-success';
        } else if (event.paymentStatus === 2) {
          statusClass = 'bg-warning-subtle text-warning';
        } else if (event.paymentStatus === 5) {
          statusClass = 'bg-danger-subtle text-danger';
        }
        
        paymentStatus = `
          <div class="d-flex align-items-center gap-2">
            <p class="mb-1 text-dark fw-medium">Trạng thái:</p>
            <span class="badge ${statusClass} px-2 py-1 fs-13">${status}</span>
          </div>
        `;
      }
      
      let productBadges = '';
      if (event.products && event.products.length > 0) {
        event.products.forEach((product, index) => {
          // Sử dụng tên sản phẩm thật nếu có
          const productInfo = this.productsData[product.productId];
          const productName = productInfo ? productInfo.name : `Sản phẩm ${index + 1}`;
          productBadges += `<a href="#!" class="badge bg-light text-dark fw-normal px-2 py-1 fs-13">${productName}</a> `;
        });
      }
      
      const formattedDate = event.date ? `${this.formatDate(event.date)}, ${this.formatTime(event.date)}` : '';
      div.innerHTML = `
        <div class="mb-4">
          ${icon}
          <div class="ms-2 d-flex flex-wrap gap-2 align-items-center justify-content-between">
            <div>
              <h5 class="mb-1 text-dark fw-medium fs-15">${event.title}</h5>
              <p class="mb-2">${event.description}</p>
              ${buttons}
              ${paymentStatus}
              ${productBadges}
            </div>
            <p class="mb-0">${formattedDate}</p>
          </div>
        </div>
      `;
      
      return div;
    },

    // Hiển thị thông tin khách hàng và địa chỉ giao hàng
    renderCustomerInfo: function(customer) {
      if (!customer) return;
      
      // Thông tin khách hàng cơ bản
      document.getElementById("customer-name").textContent = customer.fullName;
      document.getElementById("customer-email").textContent = customer.email;
      document.getElementById("customer-email").href = `mailto:${customer.email}`;
      document.getElementById("customer-phone").textContent = customer.phoneNumber;
      
      // Avatar khách hàng (sử dụng mặc định nếu không có)
      if (customer.imageUrl) {
        document.getElementById("customer-avatar").src = `${url.baseUrl}/img/Users/${customer.imageUrl}`;
      }
      else{
        document.getElementById("customer-avatar").src = `${url.baseUrl}/img/Users/default.jpg`;
      }
      
      // Địa chỉ giao hàng - Sử dụng thông tin từ address object trong response
      if (this.orderData.address) {
        const address = this.orderData.address;
        
        document.getElementById("shipping-name").textContent = address.shippingName;
        
        // Tạo địa chỉ đầy đủ
        const addressLine = address.shippingAddress;
        const wardDistrictProvince = `${address.shippingWard}, ${address.shippingDistrict}, ${address.shippingProvince}`;
        
        document.getElementById("shipping-address-line").textContent = addressLine;
        document.getElementById("shipping-city").textContent = wardDistrictProvince;
        document.getElementById("shipping-phone").textContent = address.shippingPhone;
      } else {
        // Fallback nếu không có thông tin địa chỉ cụ thể
        document.getElementById("shipping-name").textContent = customer.fullName;
        document.getElementById("shipping-address-line").textContent = customer.address || 'Không có thông tin';
        document.getElementById("shipping-city").textContent = '';
        document.getElementById("shipping-phone").textContent = customer.phoneNumber;
      }
      
      // Địa chỉ thanh toán (giống địa chỉ giao hàng)
      document.getElementById("billing-address-info").textContent = "Giống địa chỉ giao hàng";
      
      // Thông tin thanh toán khách hàng
      document.getElementById("card-holder-name").textContent = customer.fullName;
    },

    // Hiển thị thông tin thanh toán
    renderPaymentInfo: function () {
      const paymentMethod = this.orderData.paymentMethod;
      const paymentStatus = this.orderData.paymentStatus;

      // Hiển thị phương thức thanh toán
      document.getElementById("payment-method-name").textContent = `Phương thức thanh toán: ${this.getPaymentMethodName(paymentMethod)}`;

      // Hiển thị trạng thái thanh toán
      const paymentStatusIcon = document.getElementById("payment-status-icon");
      if (paymentStatus === 3) {
        paymentStatusIcon.innerHTML =
          '<iconify-icon icon="solar:check-circle-broken" class="fs-22 text-success"></iconify-icon>';
      } else if (paymentStatus === 5) {
        paymentStatusIcon.innerHTML =
          '<iconify-icon icon="solar:close-circle-broken" class="fs-22 text-danger"></iconify-icon>';
      } else {
        paymentStatusIcon.innerHTML =
          '<iconify-icon icon="solar:hourglass-broken" class="fs-22 text-warning"></iconify-icon>';
      }

      // Hiển thị chi tiết thanh toán
      if (paymentMethod === 1 || paymentMethod === 2) {
        document.getElementById("payment-method-details").textContent =
          "xxxx xxxx xxxx 1234";
      } else {
        document.getElementById("payment-method-details").textContent = "";
      }

      // Mã đơn hàng
      document.getElementById(
        "transaction-id"
      ).textContent = `${this.orderData.orderCode}`;
    },

    // Lấy tên phương thức thanh toán
    getPaymentMethodName: function (method) {
      return this.paymentMethods[method] || "Không xác định";
    },

    // Hiển thị tổng kết đơn hàng
    renderOrderSummary: function () {
      const order = this.orderData;

      // Hiển thị giá tiền
      document.getElementById("subtotal").textContent = `${this.formatCurrency(
        order.totalAmount
      )}đ`;
      document.getElementById("discount").textContent = `-${this.formatCurrency(
        order.discountAmount
      )}đ`;
      document.getElementById(
        "shipping-fee"
      ).textContent = `${this.formatCurrency(order.shippingFee)}đ`;
      document.getElementById("tax").textContent = `${this.formatCurrency(
        order.taxAmount
      )}đ`;
      document.getElementById(
        "final-total"
      ).textContent = `${this.formatCurrency(order.finalAmount)}đ`;
    },

    // Thiết lập các event listeners
    setupEventListeners: function () {
      const _this = this;

      // Nút "Cập nhật trạng thái"
      document
        .getElementById("update-status-btn")
        .addEventListener("click", function () {
          _this.showUpdateStatusModal();
        });
      
      // Nút "Chỉnh sửa vận chuyển"
      document
        .getElementById("update-shipping-btn")
        .addEventListener("click", function () {
          _this.showUpdateShippingModal();
        });
      
      document
        .getElementById("save-status-btn")
        .addEventListener("click", function () {
          _this.saveOrderStatus();
        });
        
      document
        .getElementById("save-shipping-btn")
        .addEventListener("click", function () {
          _this.saveShippingInfo();
        });
    },

    // Hiển thị modal cập nhật trạng thái
    showUpdateStatusModal: function() {
      const orderStatusSelect = document.getElementById('order-status-select');
      const paymentStatusSelect = document.getElementById('payment-status-select');
      
      // Xóa các options cũ
      orderStatusSelect.innerHTML = '';
      paymentStatusSelect.innerHTML = '';
      
      // Thêm options cho trạng thái đơn hàng
      for (const [key, value] of Object.entries(this.statuses)) {
        const option = document.createElement('option');
        option.value = key;
        option.textContent = value;
        option.selected = parseInt(key) === this.orderData.status;
        orderStatusSelect.appendChild(option);
      }
      
      // Thêm options cho trạng thái thanh toán
      for (const [key, value] of Object.entries(this.paymentStatuses)) {
        const option = document.createElement('option');
        option.value = key;
        option.textContent = value;
        option.selected = parseInt(key) === this.orderData.paymentStatus;
        paymentStatusSelect.appendChild(option);
      }
      
      // Hiển thị modal
      const updateStatusModal = new bootstrap.Modal(document.getElementById('updateStatusModal'));
      updateStatusModal.show();
    },
    
    // Lưu trạng thái đơn hàng
    saveOrderStatus: function() {
      const orderStatusSelect = document.getElementById('order-status-select');
      const paymentStatusSelect = document.getElementById('payment-status-select');
      
      const orderStatus = parseInt(orderStatusSelect.value);
      const paymentStatus = parseInt(paymentStatusSelect.value);
      
      // Kiểm tra xem có thay đổi không
      if (orderStatus === this.orderData.status && paymentStatus === this.orderData.paymentStatus) {
        alert('Không có thay đổi nào được thực hiện');
        return;
      }
      
      // Xác nhận từ người dùng
      if (!confirm('Bạn có chắc chắn muốn cập nhật trạng thái đơn hàng?')) {
        return;
      }
      
      this.showLoading(true);
      
      // Gọi API cập nhật trạng thái
      orderService.fetchApi(`/${this.orderData.id}/admin-update`, 'PUT', {
        status: orderStatus,
        paymentStatus: paymentStatus
      })
      .then(response => {
        if (response && response.success) {
          // Cập nhật dữ liệu đơn hàng
          this.orderData = response.data;
          
          // Render lại giao diện
          this.renderOrderDetail();
          
          // Đóng modal
          const updateStatusModal = bootstrap.Modal.getInstance(document.getElementById('updateStatusModal'));
          updateStatusModal.hide();
          
          // Hiển thị thông báo thành công
          alert('Cập nhật trạng thái đơn hàng thành công');
        } else {
          alert('Không thể cập nhật trạng thái đơn hàng: ' + (response.message || 'Đã xảy ra lỗi'));
        }
      })
      .catch(error => {
        console.error('Lỗi khi cập nhật trạng thái đơn hàng:', error);
        alert('Đã xảy ra lỗi khi cập nhật trạng thái đơn hàng');
      })
      .finally(() => {
        this.showLoading(false);
      });
    },

    // Thêm phương thức hiển thị modal chỉnh sửa vận chuyển
    showUpdateShippingModal: function() {
      // Điền thông tin vận chuyển hiện tại vào form
      const shipping = this.orderData.shipping || {};
      const address = this.orderData.address || {};
      
      // Điền thông tin vận chuyển
      document.getElementById('tracking-number').value = shipping.trackingNumber || '';
      document.getElementById('shipping-method').value = shipping.shippingMethod || '';
      document.getElementById('shipping-partner').value = shipping.shippingPartner || '';
      
      // Xử lý ngày tháng
      if (shipping.shippedAt) {
        document.getElementById('shipped-at').value = this.formatDateTimeForInput(shipping.shippedAt);
      }
      if (shipping.deliveredAt) {
        document.getElementById('delivered-at').value = this.formatDateTimeForInput(shipping.deliveredAt);
      }
      
      // Điền thông tin địa chỉ
      document.getElementById('shipping-name-input').value = address.shippingName || '';
      document.getElementById('shipping-phone-input').value = address.shippingPhone || '';
      document.getElementById('shipping-address-input').value = address.shippingAddress || '';
      document.getElementById('shipping-province-input').value = address.shippingProvince || '';
      document.getElementById('shipping-district-input').value = address.shippingDistrict || '';
      document.getElementById('shipping-ward-input').value = address.shippingWard || '';
      
      // Hiển thị modal
      const updateShippingModal = new bootstrap.Modal(document.getElementById('updateShippingModal'));
      updateShippingModal.show();
    },

    // Thêm phương thức lưu thông tin vận chuyển
    saveShippingInfo: function() {
      // Lấy dữ liệu từ form
      const shippingData = {
        orderId: this.orderData.id,
        trackingNumber: document.getElementById('tracking-number').value,
        shippingMethod: document.getElementById('shipping-method').value,
        shippingPartner: document.getElementById('shipping-partner').value,
        shippedAt: document.getElementById('shipped-at').value || null,
        deliveredAt: document.getElementById('delivered-at').value || null
      };
      
      const addressData = {
        shippingName: document.getElementById('shipping-name-input').value,
        shippingPhone: document.getElementById('shipping-phone-input').value,
        shippingAddress: document.getElementById('shipping-address-input').value,
        shippingProvince: document.getElementById('shipping-province-input').value,
        shippingDistrict: document.getElementById('shipping-district-input').value,
        shippingWard: document.getElementById('shipping-ward-input').value
      };
      
      // Xác nhận từ người dùng
      if (!confirm('Bạn có chắc chắn muốn cập nhật thông tin vận chuyển?')) {
        return;
      }
      
      this.showLoading(true);
      
      // Gọi API cập nhật thông tin vận chuyển
      orderService.fetchApi(`/${this.orderData.id}/admin-shipping-update`, 'PUT', {
        shipping: shippingData,
        address: addressData
      })
      .then(response => {
        if (response && response.success) {
          // Cập nhật dữ liệu đơn hàng
          this.orderData = response.data;
          
          // Render lại giao diện
          this.renderOrderDetail();
          
          // Đóng modal
          const updateShippingModal = bootstrap.Modal.getInstance(document.getElementById('updateShippingModal'));
          updateShippingModal.hide();
          
          // Hiển thị thông báo thành công
          alert('Cập nhật thông tin vận chuyển thành công');
        } else {
          alert('Không thể cập nhật thông tin vận chuyển: ' + (response.message || 'Đã xảy ra lỗi'));
        }
      })
      .catch(error => {
        console.error('Lỗi khi cập nhật thông tin vận chuyển:', error);
        alert('Đã xảy ra lỗi khi cập nhật thông tin vận chuyển');
      })
      .finally(() => {
        this.showLoading(false);
      });
    },

    // Thêm phương thức format ngày tháng cho input datetime-local
    formatDateTimeForInput: function(dateString) {
      if (!dateString) return '';
      
      const date = new Date(dateString);
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      
      return `${year}-${month}-${day}T${hours}:${minutes}`;
    },

    // Hiển thị thông tin vận chuyển
    renderShippingInfo: function() {
      const shipping = this.orderData.shipping;
      const shippingInfoContainer = document.getElementById('shipping-info');
      
      // Kiểm tra xem container có tồn tại không
      if (!shippingInfoContainer) return;
      
      // Xóa nội dung cũ
      shippingInfoContainer.innerHTML = '';
      
      if (!shipping) {
        shippingInfoContainer.innerHTML = '<p class="text-muted">Chưa có thông tin vận chuyển</p>';
        return;
      }
      
      // Hiển thị mã theo dõi vận chuyển
      let trackingHTML = `
        <div class="mb-3">
          <h6 class="fw-medium">Mã Vận Đơn</h6>
          <div class="d-flex align-items-center">
            <p class="mb-0 me-2">${shipping.trackingNumber || 'Chưa có'}</p>
            ${shipping.trackingNumber ? `
              <button class="btn btn-sm btn-outline-primary" onclick="navigator.clipboard.writeText('${shipping.trackingNumber}')">
                <i class='bx bx-copy'></i> Sao chép
              </button>
            ` : ''}
          </div>
        </div>
      `;
      shippingInfoContainer.innerHTML += trackingHTML;
      
      // Hiển thị đơn vị vận chuyển
      let partnerHTML = `
        <div class="mb-3">
          <h6 class="fw-medium">Đơn Vị Vận Chuyển</h6>
          <p class="mb-0">${shipping.shippingPartner || 'Chưa có'}</p>
        </div>
      `;
      shippingInfoContainer.innerHTML += partnerHTML;
      
      // Hiển thị phương thức vận chuyển
      let methodHTML = `
        <div class="mb-3">
          <h6 class="fw-medium">Phương Thức Vận Chuyển</h6>
          <p class="mb-0">${shipping.shippingMethod || 'Chưa có'}</p>
        </div>
      `;
      shippingInfoContainer.innerHTML += methodHTML;
      
      // Hiển thị thời gian vận chuyển
      if (shipping.shippedAt) {
        let shippedHTML = `
          <div class="mb-3">
            <h6 class="fw-medium">Thời Gian Gửi Hàng</h6>
            <p class="mb-0">${this.formatDate(shipping.shippedAt)} - ${this.formatTime(shipping.shippedAt)}</p>
          </div>
        `;
        shippingInfoContainer.innerHTML += shippedHTML;
      }
      
      // Hiển thị thời gian giao hàng
      if (shipping.deliveredAt) {
        let deliveredHTML = `
          <div class="mb-3">
            <h6 class="fw-medium">Thời Gian Giao Hàng</h6>
            <p class="mb-0">${this.formatDate(shipping.deliveredAt)} - ${this.formatTime(shipping.deliveredAt)}</p>
          </div>
        `;
        shippingInfoContainer.innerHTML += deliveredHTML;
      }
    },
  };

  orderDetailApp.init();
</script>
