@{
    Layout = "_LayoutAdmin";
    ViewBag.Title = "Danh Sách Đơn Hàng";
}

<div class="page-content">
    <!-- Start Container Fluid -->
    <div class="container-xxl">
        <div class="row mb-3">
            <div class="col-12">
                <h1 class="text-left">Danh sách đơn hàng</h1>
            </div>
        </div>

        <!-- Hiển thị thông tin kết quả tìm kiếm -->
        <div class="row mb-3">
            <div class="col-md-6">
                <p>Hiển thị <span id="total-results">0</span> đơn hàng theo bộ lọc.</p>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6 col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h4 class="card-title mb-2">Tổng đơn hàng</h4>
                                <p class="text-muted fw-medium fs-22 mb-0" id="total-orders">
                                    490
                                </p>
                            </div>
                            <div>
                                <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                    <iconify-icon icon="solar:document-add-broken"
                                        class="fs-32 text-primary avatar-title"></iconify-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h4 class="card-title mb-2">Đơn Hủy</h4>
                                <p class="text-muted fw-medium fs-22 mb-0" id="total-cancelled-orders">
                                    241
                                </p>
                            </div>
                            <div>
                                <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                    <iconify-icon icon="solar:cart-cross-broken"
                                        class="fs-32 text-primary avatar-title"></iconify-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h4 class="card-title mb-2">Đang Giao</h4>
                                <p class="text-muted fw-medium fs-22 mb-0" id="total-processing-orders">
                                    170
                                </p>
                            </div>
                            <div>
                                <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                    <iconify-icon icon="solar:tram-broken"
                                        class="fs-32 text-primary avatar-title"></iconify-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h4 class="card-title mb-2">Hoàn tiền</h4>
                                <p class="text-muted fw-medium fs-22 mb-0" id="total-refund-orders">
                                    210
                                </p>
                            </div>
                            <div>
                                <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                    <iconify-icon icon="solar:chat-round-money-broken"
                                        class="fs-32 text-primary avatar-title"></iconify-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h4 class="card-title mb-2">Chờ Thanh Toán</h4>
                                <p class="text-muted fw-medium fs-22 mb-0" id="total-pending-orders">
                                    608
                                </p>
                            </div>
                            <div>
                                <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                    <iconify-icon icon="solar:clock-circle-broken"
                                        class="fs-32 text-primary avatar-title"></iconify-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-xl-4">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <h4 class="card-title mb-2">Đã hoàn thành</h4>
                                <p class="text-muted fw-medium fs-22 mb-0" id="total-completed-orders">
                                    200
                                </p>
                            </div>
                            <div>
                                <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                    <iconify-icon icon="solar:clipboard-check-broken"
                                        class="fs-32 text-primary avatar-title"></iconify-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xl-12">
                <div class="card">
                    <div class="d-flex card-header justify-content-between align-items-center">
                        <div>
                            <h4 class="card-title">Danh Sách Đơn Hàng</h4>
                        </div>
                        <div>
                            <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal"
                                data-bs-target="#filterModal">
                                <i class="bx bx-filter-alt me-1"></i> Lọc
                            </button>
                        </div>
                    </div>
                    <div class="card-body pb-0">
                        <!-- Hiển thị bộ lọc đang áp dụng -->
                        <div class="mb-3 applied-filters" id="applied-filters" style="display: none">
                            <div class="d-inline-block me-2 mb-1">
                                <span class="badge bg-light text-dark p-2">
                                    Trạng thái: Hoàn Thành
                                    <a href="#" class="text-danger ms-1"><i class="bx bx-x"></i></a>
                                </span>
                            </div>
                            <div class="d-inline-block me-2 mb-1">
                                <span class="badge bg-light text-dark p-2">
                                    Thanh toán: Đã Thanh Toán
                                    <a href="#" class="text-danger ms-1"><i class="bx bx-x"></i></a>
                                </span>
                            </div>
                            <div class="d-inline-block me-2 mb-1">
                                <span class="badge bg-light text-dark p-2">
                                    Ngày: 01/03/2024 - 25/04/2024
                                    <a href="#" class="text-danger ms-1"><i class="bx bx-x"></i></a>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table align-middle mb-0 table-hover table-centered" style="min-height: 400px">
                                <thead class="bg-light-subtle">
                                    <tr>
                                        <th>Mã Đơn</th>
                                        <th>Khách Hàng</th>
                                        <th>Ngày Tạo</th>
                                        <th>Tổng Tiền</th>
                                        <th>Phương Thức Thanh Toán</th>
                                        <th>Trạng Thái Thanh Toán</th>
                                        <th>Trạng Thái Đơn</th>
                                        <th>Thao Tác</th>
                                    </tr>
                                </thead>
                                <tbody style="min-height: 350px">
                                    <!-- Generate with js -->
                                </tbody>
                            </table>
                        </div>
                        <!-- end table-responsive -->
                    </div>
                    <div class="card-footer border-top">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-end mb-0">
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0);">Trước</a>
                                </li>
                                <li class="page-item active">
                                    <a class="page-link" href="javascript:void(0);">1</a>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0);">2</a>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0);">3</a>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="javascript:void(0);">Sau</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Container Fluid -->

    <!-- ========== Footer Start ========== -->
    <footer class="footer">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 text-center">
                    &copy; VNFarm. Crafted by
                    <iconify-icon icon="iconamoon:heart-duotone" class="fs-18 align-middle text-danger"></iconify-icon>
                    <a href="#" class="fw-bold footer-text" target="_blank">Hệ Thống Quản Lý Nông Sản VNFarm</a>
                </div>
            </div>
        </div>
    </footer>
    <!-- ========== Footer End ========== -->
</div>

<!-- Modal Lọc -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Lọc Đơn Hàng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- Bổ sung tìm kiếm với từ khóa -->
                    <div class="mb-3">
                        <label class="form-label">Tìm kiếm</label>
                        <input type="text" class="form-control" id="filter-search-term"
                            placeholder="Tìm kiếm theo mã đơn, tên khách hàng..." />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Trạng Thái Đơn Hàng</label>
                        <select class="form-select" id="filter-status">
                            <option value="-999">Tất cả</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Trạng Thái Thanh Toán</label>
                        <select class="form-select" id="filter-payment-status">
                            <option value="-999">Tất cả</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Phương Thức Thanh Toán</label>
                        <select class="form-select" id="filter-payment-method">
                            <option value="-999">Tất cả</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Khoảng Thời Gian</label>
                        <div class="row">
                            <div class="col-6">
                                <input type="date" class="form-control" id="filter-start-date" placeholder="Từ ngày" />
                            </div>
                            <div class="col-6">
                                <input type="date" class="form-control" id="filter-end-date" placeholder="Đến ngày" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Khoảng Giá (VNĐ)</label>
                        <div class="row">
                            <div class="col-6">
                                <input type="number" class="form-control" id="filter-min-total" placeholder="Từ" />
                            </div>
                            <div class="col-6">
                                <input type="number" class="form-control" id="filter-max-total" placeholder="Đến" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Sắp Xếp Theo</label>
                        <select class="form-select" id="filter-sort-by">
                            <option value="0">Mới nhất</option>
                            <option value="1">Cũ nhất</option>
                            <option value="2">Tổng tiền (Cao đến thấp)</option>
                            <option value="3">Tổng tiền (Thấp đến cao)</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Số đơn hàng trên trang</label>
                        <select class="form-select" id="filter-page-size">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="15">15</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">
                    Hủy
                </button>
                <button type="button" class="btn btn-danger me-2" id="reset-filter">
                    Xóa Bộ Lọc
                </button>
                <button type="button" class="btn btn-primary" id="apply-filter">
                    Áp Dụng
                </button>
            </div>
        </div>
    </div>
</div>

<!-- <script src="admin-js/dashboard.js"></script> -->

<script type="module">
    import { BaseService } from "/custom/BaseService.js";
    import createFilterOrder from "/custom/filterOrder.js";
    import { SortType } from "/custom/Enum.js";
    import { EnumService } from "/custom/EnumService.js";
    import key from "/custom/jwt.js";
    import Toast from "/Custom/Toast_Seller.js";
    import url from "/Custom/endpoints.js";

    const jwt = key;
    const orderUrl = url.base + "/Order";
    const enumService = new EnumService(url.baseUrl, jwt);
    const orderService = new BaseService(orderUrl, jwt);

    const appOrder = {
        // Dữ liệu lọc từ module filterOrder
        filter: new createFilterOrder({
            searchTerm: "",
            sortBy: SortType.Latest,
            page: 1,
            pageSize: 10,
        }),

        // Lưu trữ các enum
        statuses: {},
        paymentStatuses: {},
        paymentMethods: {},

        // Khởi tạo ứng dụng
        init: function () {
            new Promise((resolve, reject) => {
                // Tải tất cả dữ liệu meta data
                this.loadOrderStatuses();
                this.loadPaymentStatuses();
                this.loadPaymentMethods();
                this.loadSortTypes();

                resolve();
            })
                .then(() => {
                    // Sau khi đã tải xong dữ liệu meta, thực hiện tìm kiếm
                    this.loadOrderStats();
                    // Thiết lập các sự kiện
                    this.setupEventListeners();
                })
                .then(() => {
                    document.getElementById("apply-filter").click();
                })
                .catch((error) => {
                    console.error("Lỗi khởi tạo appOrder:", error);
                })
                .finally(() => {
                    setTimeout(() => {
                        console.log("This.statuses: ", this.statuses);
                        console.log("This.paymentStatuses: ", this.paymentStatuses);
                        console.log("This.paymentMethods: ", this.paymentMethods);
                    }, 2000);
                });
        },

        // Tải dữ liệu thống kê
        loadOrderStats: function () {
            // Hiển thị loading cho các card thống kê
            document.getElementById("total-orders").innerHTML =
                '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById("total-cancelled-orders").innerHTML =
                '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById("total-processing-orders").innerHTML =
                '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById("total-refund-orders").innerHTML =
                '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById("total-pending-orders").innerHTML =
                '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById("total-completed-orders").innerHTML =
                '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';

            orderService
                .getById("stats")
                .then((response) => {
                    if (response && response.success && response.data) {
                        console.log("Stats response: ", response);
                        const stats = response.data;

                        // Cập nhật các card thống kê với dữ liệu từ API
                        document.getElementById("total-orders").textContent =
                            stats.totalOrders || 0;
                        document.getElementById("total-cancelled-orders").textContent =
                            stats.totalCanceled || 0;
                        document.getElementById("total-processing-orders").textContent =
                            stats.totalShipping || 0;
                        document.getElementById("total-refund-orders").textContent =
                            stats.totalRefunded || 0;
                        document.getElementById("total-pending-orders").textContent =
                            stats.totalPending || 0;
                        document.getElementById("total-completed-orders").textContent =
                            stats.totalCompleted || 0;
                    } else {
                        // Hiển thị giá trị mặc định nếu không có dữ liệu
                        document.getElementById("total-orders").textContent = "0";
                        document.getElementById("total-cancelled-orders").textContent = "0";
                        document.getElementById("total-processing-orders").textContent =
                            "0";
                        document.getElementById("total-refund-orders").textContent = "0";
                        document.getElementById("total-pending-orders").textContent = "0";
                        document.getElementById("total-completed-orders").textContent = "0";
                    }
                })
                .catch((error) => {
                    console.error("Lỗi tải thống kê:", error);

                    // Hiển thị giá trị mặc định nếu có lỗi
                    document.getElementById("total-orders").textContent = "0";
                    document.getElementById("total-cancelled-orders").textContent = "0";
                    document.getElementById("total-processing-orders").textContent = "0";
                    document.getElementById("total-refund-orders").textContent = "0";
                    document.getElementById("total-pending-orders").textContent = "0";
                    document.getElementById("total-completed-orders").textContent = "0";
                });
        },

        // Tải trạng thái đơn hàng
        loadOrderStatuses: function () {
            // Lấy dropdown trạng thái đơn hàng
            const statusDropdown = document.getElementById("filter-status");
            statusDropdown.innerHTML = "<option value='-999'>Tất cả</option>";

            enumService
                .getOrderStatuses()
                .then((data) => {
                    if (data) {
                        // Lưu trữ để sử dụng sau này
                        this.statuses = data;

                        // Điền vào dropdown
                        Object.keys(data).forEach((key) => {
                            const option = document.createElement("option");
                            option.value = key;
                            option.textContent = data[key];
                            statusDropdown.appendChild(option);
                        });
                    }
                })
                .catch((error) => {
                    console.error("Lỗi tải trạng thái đơn hàng:", error);
                });
        },

        // Tải trạng thái thanh toán
        loadPaymentStatuses: function () {
            const paymentStatusDropdown = document.getElementById(
                "filter-payment-status"
            );
            paymentStatusDropdown.innerHTML = "<option value='-999'>Tất cả</option>";

            enumService
                .getPaymentStatuses()
                .then((data) => {
                    if (data) {
                        // Lưu trữ để sử dụng sau này
                        this.paymentStatuses = data.data;

                        // Điền vào dropdown
                        Object.keys(data.data).forEach((key) => {
                            const option = document.createElement("option");
                            option.value = key;
                            option.textContent = data.data[key];
                            paymentStatusDropdown.appendChild(option);
                        });
                    }
                })
                .catch((error) => {
                    console.error("Lỗi tải trạng thái thanh toán:", error);
                });
        },

        // Tải phương thức thanh toán
        loadPaymentMethods: function () {
            const paymentMethodDropdown = document.getElementById(
                "filter-payment-method"
            );
            paymentMethodDropdown.innerHTML = "<option value='-999'>Tất cả</option>";

            enumService
                .getPaymentMethods()
                .then((data) => {
                    if (data && data.success && data.data) {
                        // Lưu trữ để sử dụng sau này
                        this.paymentMethods = data.data;

                        // Điền vào dropdown
                        Object.keys(data.data).forEach((key) => {
                            const option = document.createElement("option");
                            option.value = key;
                            option.textContent = data.data[key];
                            paymentMethodDropdown.appendChild(option);
                        });
                    }
                })
                .catch((error) => {
                    console.error("Lỗi tải phương thức thanh toán:", error);
                });
        },

        // Tải kiểu sắp xếp
        loadSortTypes: function () {
            const sortByDropdown = document.getElementById("filter-sort-by");
            sortByDropdown.innerHTML = "";

            enumService
                .getSortTypesByEntity("Order")
                .then((data) => {
                    if (data) {
                        Object.keys(data).forEach((key) => {
                            const option = document.createElement("option");
                            option.value = key;
                            option.textContent = data[key];
                            sortByDropdown.appendChild(option);
                        });
                        // Tự động chọn option đầu tiên nếu có
                        if (sortByDropdown.options.length > 0) {
                            sortByDropdown.selectedIndex = 0;
                            // Lưu giá trị đã chọn vào filter
                            const sortByValue =
                                document.getElementById("filter-sort-by").value;
                            this.filter.sortBy = sortByValue
                                ? parseInt(sortByValue)
                                : SortType.Latest;
                        }
                    }
                })
                .catch((error) => {
                    console.error("Lỗi tải kiểu sắp xếp:", error);

                    // Nếu API thất bại, hiển thị các lựa chọn mặc định
                    const defaultSortOptions = [
                        { value: "0", text: "Mới nhất" },
                        { value: "1", text: "Cũ nhất" },
                        { value: "2", text: "Tổng tiền (Cao đến thấp)" },
                        { value: "3", text: "Tổng tiền (Thấp đến cao)" },
                    ];

                    defaultSortOptions.forEach((option) => {
                        const optionElement = document.createElement("option");
                        optionElement.value = option.value;
                        optionElement.textContent = option.text;
                        sortByDropdown.appendChild(optionElement);
                    });
                });
        },

        showAppliedFilters: function () {
            // none
        },

        // Thiết lập các sự kiện
        setupEventListeners: function () {
            const _this = this;

            // Nút áp dụng filter
            document
                .getElementById("apply-filter")
                .addEventListener("click", function () {
                    // Lấy giá trị từ form
                    const searchTerm =
                        document.getElementById("filter-search-term").value;
                    const status = parseInt(
                        document.getElementById("filter-status").value
                    );
                    const paymentStatus = parseInt(
                        document.getElementById("filter-payment-status").value
                    );
                    const paymentMethod = parseInt(
                        document.getElementById("filter-payment-method").value
                    );
                    let startDate = document.getElementById("filter-start-date").value;
                    let endDate = document.getElementById("filter-end-date").value;

                    // Nếu cả hai giá trị đều trống, tự động thiết lập khoảng thời gian 90 ngày gần đây
                    if (!startDate) {
                        const today = new Date();
                        const ninetyDaysAgo = new Date();
                        ninetyDaysAgo.setDate(today.getDate() - 90);

                        // Định dạng ngày thành YYYY-MM-DD cho input date
                        startDate = ninetyDaysAgo.toISOString().split("T")[0];

                        // Cập nhật giá trị hiển thị trong form
                        document.getElementById("filter-start-date").value = startDate;
                    }

                    if (!endDate) {
                        endDate = null;
                    }
                    const minTotal = document.getElementById("filter-min-total").value
                        ? parseInt(document.getElementById("filter-min-total").value)
                        : 0;
                    const maxTotal = document.getElementById("filter-max-total").value
                        ? parseInt(document.getElementById("filter-max-total").value)
                        : 10000000;
                    const sortBy = parseInt(
                        document.getElementById("filter-sort-by").value
                    );
                    const pageSize = parseInt(
                        document.getElementById("filter-page-size").value
                    );

                    // Cập nhật đối tượng filter
                    _this.filter.searchTerm = searchTerm;
                    _this.filter.status = status;
                    _this.filter.paymentStatus = paymentStatus;
                    _this.filter.paymentMethod = paymentMethod;
                    _this.filter.startDate = startDate;
                    _this.filter.endDate = endDate;
                    _this.filter.minTotal = minTotal;
                    _this.filter.maxTotal = maxTotal;
                    _this.filter.sortBy = sortBy ? parseInt(sortBy) : SortType.Latest;
                    _this.filter.pageSize = pageSize;
                    _this.filter.page = 1; // Reset về trang 1 khi áp dụng filter mới

                    // Tìm kiếm đơn hàng
                    _this.searchOrders();

                    // Hiển thị filter đã áp dụng
                    //_this.showAppliedFilters();

                    // Đóng modal
                    const modalElement = document.getElementById("filterModal");
                    const modal = bootstrap.Modal.getInstance(modalElement);
                    if (modal) modal.hide();
                });

            // Nút reset filter
            document
                .getElementById("reset-filter")
                .addEventListener("click", function () {
                    _this.resetFilters();
                });

            // Xử lý phân trang
            document
                .querySelector(".pagination")
                .addEventListener("click", function (e) {
                    e.preventDefault();

                    const target = e.target.closest(".page-link");
                    if (!target) return;

                    if (target.textContent === "Trước") {
                        if (_this.filter.page > 1) {
                            _this.filter.page--;
                            _this.searchOrders();
                        }
                    } else if (target.textContent === "Sau") {
                        _this.filter.page++;
                        _this.searchOrders();
                    } else {
                        const page = parseInt(target.textContent);
                        _this.filter.page = page;
                        _this.searchOrders();
                    }
                });
        },

        // Tìm kiếm đơn hàng
        searchOrders: function () {
            // Hiển thị loading
            this.showTableLoading(true);

            // Gọi API tìm kiếm đơn hàng
            orderService
                .find(this.filter)
                .then((response) => {
                    if (response && response.success) {
                        console.log("Response order filter: ", response);
                        // Hiển thị dữ liệu
                        this.renderTable(response.data);

                        // Cập nhật phân trang
                        this.updatePagination(response.totalCount, response.totalPages);

                        // Cập nhật tổng số kết quả
                        document.getElementById("total-results").textContent =
                            response.totalCount;
                    } else {
                        // Hiển thị thông báo lỗi
                        this.renderEmptyTable(
                            "Không thể tải dữ liệu. Vui lòng thử lại sau."
                        );
                        document.getElementById("total-results").textContent = "0";
                    }

                    this.showTableLoading(false);
                })
                .catch((error) => {
                    console.error("Lỗi tìm kiếm đơn hàng:", error);
                    this.renderEmptyTable("Đã xảy ra lỗi khi tải dữ liệu.");
                    document.getElementById("total-results").textContent = "0";
                    this.showTableLoading(false);
                });
        },

        // Hiển thị bảng dữ liệu
        renderTable: function (orders) {
            const tableBody = document.querySelector("table.table tbody");
            tableBody.innerHTML = "";

            if (!orders || orders.length === 0) {
                this.renderEmptyTable("Không tìm thấy đơn hàng nào phù hợp.");
                return;
            }

            // Tạo từng dòng cho mỗi đơn hàng
            orders.forEach((order) => {
                const row = document.createElement("tr");

                // Xác định các class CSS cho trạng thái
                let statusBadgeClass = "";
                let paymentStatusBadgeClass = "";

                // Trạng thái đơn hàng
                switch (order.status) {
                    case 0: // Chờ xác nhận
                        statusBadgeClass =
                            "badge border border-secondary text-secondary px-2 py-1 fs-13";
                        break;
                    case 1: // Đang xử lý
                        statusBadgeClass =
                            "badge border border-info text-info px-2 py-1 fs-13";
                        break;
                    case 2: // Đang đóng gói
                        statusBadgeClass =
                            "badge border border-warning text-warning px-2 py-1 fs-13";
                        break;
                    case 3: // Đang vận chuyển
                        statusBadgeClass =
                            "badge border border-primary text-primary px-2 py-1 fs-13";
                        break;
                    case 4: // Đã giao hàng
                        statusBadgeClass =
                            "badge border border-success text-success px-2 py-1 fs-13";
                        break;
                    case 5: // Đã hoàn thành
                        statusBadgeClass =
                            "badge border border-success text-success px-2 py-1 fs-13";
                        break;
                    case 6: // Đã hủy
                        statusBadgeClass =
                            "badge border border-danger text-danger px-2 py-1 fs-13";
                        break;
                    case 7: // Đã hoàn tiền
                        statusBadgeClass =
                            "badge border border-success text-success px-2 py-1 fs-13";
                        break;
                    case 8: // Đã xác nhận
                        statusBadgeClass =
                            "badge border border-info text-info px-2 py-1 fs-13";
                        break;
                    default:
                        statusBadgeClass =
                            "badge border border-secondary text-secondary px-2 py-1 fs-13";
                }

                // Trạng thái thanh toán
                switch (order.paymentStatus) {
                    case 1: // Chưa thanh toán
                        paymentStatusBadgeClass =
                            "badge bg-light text-dark px-2 py-1 fs-13";
                        break;
                    case 3: // Đã thanh toán
                        paymentStatusBadgeClass =
                            "badge bg-success text-light px-2 py-1 fs-13";
                        break;
                    case 2: //Thanh toán 1 phần
                        paymentStatusBadgeClass =
                            "badge bg-warning text-light px-2 py-1 fs-13";
                        break;
                    case 4: //Đã hoàn tiền
                        paymentStatusBadgeClass =
                            "badge bg-success text-light px-2 py-1 fs-13";
                        break;
                    case 5: //Lỗi thanh toán
                        paymentStatusBadgeClass =
                            "badge bg-danger text-light px-2 py-1 fs-13";
                        break;
                    default:
                        paymentStatusBadgeClass =
                            "badge bg-light text-dark px-2 py-1 fs-13";
                }

                // Dữ liệu bảng
                row.innerHTML = `
          <td>
            <a href="/Admin/OrderDetail?orderCode=${order.id}" class="link-primary fw-medium">${order.orderCode}</a>
          </td>
          <td>
            <a href="#!" class="link-primary fw-medium">${order.buyer.fullName
                    }</a>
          </td>
          <td>${this.formatDate(order.createdAt)}</td>
          <td>${this.formatCurrency(order.finalAmount)}đ</td>
          <td>${this.paymentMethods[order.paymentMethod] || "Không xác định"
                    }</td>
          <td><span class="${paymentStatusBadgeClass}">${this.paymentStatuses[order.paymentStatus] || "Không xác định"
                    }</span></td>
          <td><span class="${statusBadgeClass}">${this.statuses[order.status] || "Không xác định"
                    }</span></td>
          <td>
            <div class="d-flex gap-2">
              <a href="/Admin/OrderDetail?orderCode=${order.id}" class="btn btn-light btn-sm"><iconify-icon icon="solar:eye-broken" class="align-middle fs-18"></iconify-icon></a>
              <button class="btn btn-soft-danger btn-sm delete-order" data-id="${order.id
                    }"><iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon></button>
                    </div>
                </td>
            `;

                tableBody.appendChild(row);
            });

            // Thêm sự kiện xóa đơn hàng
            this.setupDeleteOrderEvents();
        },

        // Thiết lập sự kiện xóa đơn hàng
        setupDeleteOrderEvents: function () {
            const _this = this;
            document.querySelectorAll(".delete-order").forEach((button) => {
                button.addEventListener("click", function () {
                    const orderId = this.getAttribute("data-id");

                    if (confirm("Bạn có chắc chắn muốn xóa đơn hàng này không?")) {
                        _this.deleteOrder(orderId);
                    }
                });
            });
        },

        // Xóa đơn hàng
        deleteOrder: function (orderId) {
            orderService
                .delete(orderId)
                .then((response) => {
                    if (response && response.success) {
                        Toast.success("Xóa đơn hàng thành công!");
                        this.searchOrders(); // Tải lại dữ liệu
                        this.loadOrderStats(); // Tải lại thống kê
                    } else {
                        Toast.error("Không thể xóa đơn hàng. Vui lòng thử lại sau.");
                    }
                })
                .catch((error) => {
                    console.error("Lỗi khi xóa đơn hàng:", error);
                    Toast.error("Đã xảy ra lỗi khi xóa đơn hàng.");
                });
        },

        // Hiển thị bảng trống với thông báo
        renderEmptyTable: function (message) {
            const tableBody = document.querySelector("table.table tbody");
            tableBody.innerHTML = `
        <tr>
          <td colspan="8" class="text-center">
            ${message}
          </td>
        </tr>
      `;
        },

        // Cập nhật phân trang
        updatePagination: function (totalCount, totalPages) {
            const paginationUl = document.querySelector(".pagination");

            // Tính toán tổng số trang dựa trên tổng số bản ghi và số bản ghi mỗi trang
            const calculatedTotalPages = Math.ceil(totalCount / this.filter.pageSize);

            // Sử dụng tổng số trang đã tính toán
            totalPages = calculatedTotalPages;

            // Tạo HTML phân trang với nút "Trước" bị disabled nếu đang ở trang đầu tiên
            let paginationHTML = `
        <li class="page-item ${this.filter.page === 1 ? "disabled" : ""}">
          <a class="page-link" href="javascript:void(0);">Trước</a>
        </li>
      `;

            // Hiển thị trang đầu tiên nếu không gần trang hiện tại
            if (this.filter.page > 3) {
                paginationHTML += `
          <li class="page-item">
            <a class="page-link" href="javascript:void(0);">1</a>
          </li>
          <li class="page-item disabled">
            <a class="page-link" href="javascript:void(0);">...</a>
          </li>
        `;
            }

            // Hiển thị trang trước đó (nếu có)
            if (this.filter.page > 1) {
                paginationHTML += `
          <li class="page-item">
            <a class="page-link" href="javascript:void(0);">${this.filter.page - 1
                    }</a>
          </li>
        `;
            }

            // Hiển thị trang hiện tại
            paginationHTML += `
        <li class="page-item active">
          <a class="page-link" href="javascript:void(0);">${this.filter.page}</a>
        </li>
      `;

            // Hiển thị trang sau (nếu có)
            if (this.filter.page < totalPages) {
                paginationHTML += `
          <li class="page-item">
            <a class="page-link" href="javascript:void(0);">${this.filter.page + 1
                    }</a>
          </li>
        `;
            }

            // Hiển thị dấu ... và trang cuối nếu cần
            if (this.filter.page < totalPages - 2) {
                paginationHTML += `
          <li class="page-item disabled">
            <a class="page-link" href="javascript:void(0);">...</a>
          </li>
          <li class="page-item">
            <a class="page-link" href="javascript:void(0);">${totalPages}</a>
          </li>
        `;
            }

            // Nút "Sau" bị disabled nếu đang ở trang cuối cùng
            paginationHTML += `
        <li class="page-item ${this.filter.page >= totalPages ? "disabled" : ""
                }">
          <a class="page-link" href="javascript:void(0);">Sau</a>
        </li>
      `;

            paginationUl.innerHTML = paginationHTML;
        },

        // Hiển thị các bộ lọc đã áp dụng
        displayAppliedFilters: function () {
            const appliedFilters = document.getElementById("applied-filters");
            appliedFilters.innerHTML = "";

            if (this.filter.searchTerm) {
                appliedFilters.appendChild(
                    this.createFilterBadge(`Từ khóa: ${this.filter.searchTerm}`)
                );
            }

            // Trạng thái đơn hàng
            if (this.filter.status !== -999) {
                appliedFilters.appendChild(
                    this.createFilterBadge(
                        `Trạng thái: ${this.statuses[this.filter.status]}`
                    )
                );
            }

            // Trạng thái thanh toán
            if (this.filter.paymentStatus !== -999) {
                appliedFilters.appendChild(
                    this.createFilterBadge(
                        `Thanh toán: ${this.paymentStatuses[this.filter.paymentStatus]}`
                    )
                );
            }

            // Phương thức thanh toán
            if (this.filter.paymentMethod !== -999) {
                appliedFilters.appendChild(
                    this.createFilterBadge(
                        `Phương thức: ${this.paymentMethods[this.filter.paymentMethod]}`
                    )
                );
            }

            // Khoảng thời gian
            if (this.filter.startDate && this.filter.endDate) {
                appliedFilters.appendChild(
                    this.createFilterBadge(
                        `Ngày: ${this.formatDateForDisplay(
                            this.filter.startDate
                        )} - ${this.formatDateForDisplay(this.filter.endDate)}`
                    )
                );
            } else if (this.filter.startDate) {
                appliedFilters.appendChild(
                    this.createFilterBadge(
                        `Từ ngày: ${this.formatDateForDisplay(this.filter.startDate)}`
                    )
                );
            } else if (this.filter.endDate) {
                appliedFilters.appendChild(
                    this.createFilterBadge(
                        `Đến ngày: ${this.formatDateForDisplay(this.filter.endDate)}`
                    )
                );
            }

            // Khoảng giá
            if (this.filter.minTotal > 0 || this.filter.maxTotal < 10000000) {
                let priceText = "";

                if (this.filter.minTotal > 0 && this.filter.maxTotal < 10000000) {
                    priceText = `${this.formatCurrency(
                        this.filter.minTotal
                    )}đ - ${this.formatCurrency(this.filter.maxTotal)}đ`;
                } else if (this.filter.minTotal > 0) {
                    priceText = `≥ ${this.formatCurrency(this.filter.minTotal)}đ`;
                } else if (this.filter.maxTotal < 10000000) {
                    priceText = `≤ ${this.formatCurrency(this.filter.maxTotal)}đ`;
                }

                appliedFilters.appendChild(this.createFilterBadge(`Giá: ${priceText}`));
            }
        },

        // Tạo badge hiển thị bộ lọc
        createFilterBadge: function (text) {
            const div = document.createElement("div");
            div.className = "d-inline-block me-2 mb-1";
            div.innerHTML = `
        <span class="badge bg-light text-dark p-2">
          ${text}
          <a href="#" class="text-danger ms-1"><i class="bx bx-x"></i></a>
        </span>
      `;
            return div;
        },

        // Reset bộ lọc
        resetFilters: function () {
            // Reset các trường trong form
            document.getElementById("filter-search-term").value = "";
            document.getElementById("filter-status").value = "-999";
            document.getElementById("filter-payment-status").value = "-999";
            document.getElementById("filter-payment-method").value = "-999";
            document.getElementById("filter-start-date").value = "";
            document.getElementById("filter-end-date").value = "";
            document.getElementById("filter-min-total").value = "";
            document.getElementById("filter-max-total").value = "";
            document.getElementById("filter-sort-by").value = SortType.Latest;
            document.getElementById("filter-page-size").value = "10";

            // Reset đối tượng filter
            this.filter = new createFilterOrder({
                searchTerm: "",
                sortBy: SortType.Latest,
                page: 1,
                pageSize: 10,
            });

            // Tìm kiếm lại với bộ lọc mặc định
            this.searchOrders();

            // Xóa các bộ lọc hiển thị
            document.getElementById("appliedFilters").innerHTML = "";
        },

        // Hiển thị loading cho bảng
        showTableLoading: function (isLoading) {
            const tableBody = document.querySelector("table.table tbody");

            if (isLoading) {
                // Thêm class loading để có hiệu ứng mờ dần
                tableBody.classList.add("loading");

                // Giữ lại nội dung cũ nếu đã có dữ liệu
                if (
                    tableBody.children.length === 0 ||
                    (tableBody.children.length === 1 &&
                        tableBody.children[0].querySelector('td[colspan="8"]'))
                ) {
                    tableBody.innerHTML = `
            <tr>
              <td colspan="8" class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="mt-2">Đang tải dữ liệu...</p>
              </td>
            </tr>
          `;
                }
            } else {
                // Xóa class loading khi hoàn tất
                setTimeout(() => {
                    tableBody.classList.remove("loading");
                }, 200);
            }
        },

        // Định dạng tiền tệ
        formatCurrency: function (amount) {
            return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        },

        // Định dạng ngày
        formatDate: function (dateString) {
            const date = new Date(dateString);
            const day = date.getDate().toString().padStart(2, "0");
            const month = (date.getMonth() + 1).toString().padStart(2, "0");
            const year = date.getFullYear();

            return `${day}/${month}/${year}`;
        },

        // Định dạng ngày cho hiển thị
        formatDateForDisplay: function (dateString) {
            if (!dateString) return "";

            const date = new Date(dateString);
            const day = date.getDate().toString().padStart(2, "0");
            const month = (date.getMonth() + 1).toString().padStart(2, "0");
            const year = date.getFullYear();

            return `${day}/${month}/${year}`;
        },
    };

    appOrder.init();
</script>
