@{
    Layout = "_LayoutAdmin";
}

<style>
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .card {
        position: relative;
    }

    .fade-in {
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
    
    .status-select-container {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .save-btn {
        visibility: hidden;
        opacity: 0;
        transition: all 0.3s ease;
    }
    
    .status-changed .save-btn {
        visibility: visible;
        opacity: 1;
    }
</style>

<div class="page-content">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title">Quản Lý Trạng Thái Kích Hoạt</h4>
                    <div class="search-box">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Tìm theo mã, email, SĐT..." id="searchInput">
                            <button class="btn btn-primary" type="button" id="searchButton">
                                <i class="bx bx-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Filter Form -->
                <div class="card-body border-bottom">
                    <div class="row">
                        <div class="col-12">
                            <button class="btn btn-light mb-2" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse">
                                <i class="bx bx-filter-alt me-1"></i> Bộ lọc nâng cao
                            </button>
                            
                            <div class="collapse" id="filterCollapse">
                                <div class="card card-body bg-light">
                                    <form id="filterForm">
                                        <div class="row g-3">
                                            <div class="col-md-3">
                                                <label class="form-label">Vai trò</label>
                                                <select class="form-select" id="roleFilter">
                                                    <option value="-999">Tất cả</option>
                                                    <option value="1">Quản trị viên</option>
                                                    <option value="2">Người bán</option>
                                                    <option value="3">Người mua</option>
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label">Trạng thái</label>
                                                <select class="form-select" id="statusFilter">
                                                    <option value="">Tất cả</option>
                                                    <option value="true">Đang hoạt động</option>
                                                    <option value="false">Ngưng hoạt động</option>
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label">Xác thực email</label>
                                                <select class="form-select" id="emailVerifiedFilter">
                                                    <option value="">Tất cả</option>
                                                    <option value="true">Đã xác thực</option>
                                                    <option value="false">Chưa xác thực</option>
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label">Sắp xếp theo</label>
                                                <select class="form-select" id="sortFilter">
                                                    <option value="2">Mới nhất</option>
                                                    <option value="3">Cũ nhất</option>
                                                </select>
                                            </div>
                                            <div class="col-12 text-end mt-3">
                                                <button type="button" id="resetFilterButton" class="btn btn-light me-2">
                                                    <i class="bx bx-reset me-1"></i> Đặt lại
                                                </button>
                                                <button type="button" id="applyFilterButton" class="btn btn-primary">
                                                    <i class="bx bx-filter me-1"></i> Lọc kết quả
                                                </button>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-centered table-nowrap mb-0">
                            <thead>
                                <tr>
                                    <th>
                                        <a href="#" class="text-dark d-inline-block" data-sort="id">
                                            ID
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark d-inline-block" data-sort="fullName">
                                            Thông Tin
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark d-inline-block" data-sort="phoneNumber">
                                            Số Điện Thoại
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark d-inline-block" data-sort="email">
                                            Email
                                        </a>
                                    </th>
                                    <th>Địa Chỉ</th>
                                    <th>
                                        <a href="#" class="text-dark d-inline-block" data-sort="role">
                                            Vai Trò
                                        </a>
                                    </th>
                                    <th>
                                        <a href="#" class="text-dark d-inline-block" data-sort="isActive">
                                            Trạng Thái
                                        </a>
                                    </th>
                                    <th>Thao Tác</th>
                                </tr>
                            </thead>
                            <tbody id="userTableBody">
                                <!-- Dữ liệu người dùng sẽ được render bởi JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Hiển thị thông báo khi không có dữ liệu -->
                    <div id="noDataMessage" class="text-center my-5" style="display: none;">
                        <iconify-icon icon="bx:bx-search-alt" style="font-size: 48px; color: #ccc;"></iconify-icon>
                        <p class="mt-2">Không tìm thấy dữ liệu phù hợp</p>
                    </div>
                    
                    <!-- Pagination -->
                    <div class="row mt-4">
                        <div class="col-sm-12 col-md-5">
                            <div class="dataTables_info" id="paginationInfo">
                                Hiển thị 0 đến 0 trong tổng số 0 bản ghi
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-7">
                            <div class="d-flex justify-content-end">
                                <div class="pagination-wrap">
                                    <nav aria-label="Page navigation">
                                        <ul class="pagination" id="pagination">
                                            <!-- Các nút phân trang sẽ được tạo bởi JavaScript -->
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="module">
    import { BaseService } from "/custom/BaseService.js";
    import { SortType, UserRole } from "/custom/Enum.js";
    import createFilterUser from "/custom/filterUser.js";
    import key from "/Custom/jwt.js";
    import url from "/Custom/endpoints.js";
    import Toast from "/Custom/Toast_Seller.js";

    // Khởi tạo services
    const jwt = key;
    const userUrl = url.base + "/Users";
    const userService = new BaseService(userUrl, jwt);

    // Ứng dụng quản lý kích hoạt người dùng
    const userActivateApp = {
        // Trạng thái hiện tại của ứng dụng
        currentState: {
            page: 1,
            pageSize: 10,
            sort: SortType.Latest,
            role: UserRole.All,
            isActive: null,
            emailVerified: null,
            search: "",
            totalPages: 1,
            totalItems: 0
        },
        
        // Người dùng đang thay đổi trạng thái
        pendingChanges: {},
        
        // Khởi tạo ứng dụng
        init: function() {
            this.setupEventListeners();
            this.loadUsers();
        },
        
        // Thiết lập các event listeners
        setupEventListeners: function() {
            const _this = this;
            
            // Tìm kiếm
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    _this.handleSearch();
                }
            });
            
            document.getElementById('searchButton').addEventListener('click', function() {
                _this.handleSearch();
            });
            
            // Lọc
            document.getElementById('applyFilterButton').addEventListener('click', function() {
                _this.applyFilters();
            });
            
            document.getElementById('resetFilterButton').addEventListener('click', function() {
                _this.resetFilters();
            });
            
            // Sắp xếp
            document.querySelectorAll('th a[data-sort]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const sortField = this.getAttribute('data-sort');
                    _this.handleSort(sortField);
                });
            });
        },
        
        // Xử lý tìm kiếm
        handleSearch: function() {
            const searchValue = document.getElementById('searchInput').value.trim();
            this.currentState.search = searchValue;
            this.currentState.page = 1; // Reset về trang đầu tiên khi tìm kiếm
            this.loadUsers();
        },
        
        // Xử lý lọc
        applyFilters: function() {
            // Lấy giá trị từ các trường lọc
            const roleValue = document.getElementById('roleFilter').value;
            const statusValue = document.getElementById('statusFilter').value;
            const emailVerifiedValue = document.getElementById('emailVerifiedFilter').value;
            const sortValue = document.getElementById('sortFilter').value;
            
            // Cập nhật trạng thái
            this.currentState.role = parseInt(roleValue);
            this.currentState.sort = parseInt(sortValue);
            this.currentState.isActive = statusValue === "" ? null : statusValue === "true";
            this.currentState.emailVerified = emailVerifiedValue === "" ? null : emailVerifiedValue === "true";
            this.currentState.page = 1; // Reset về trang đầu tiên khi áp dụng bộ lọc
            
            // Tải lại dữ liệu
            this.loadUsers();
        },
        
        // Đặt lại bộ lọc
        resetFilters: function() {
            // Reset form
            document.getElementById('filterForm').reset();
            
            // Reset trạng thái
            this.currentState.role = UserRole.All;
            this.currentState.isActive = null;
            this.currentState.emailVerified = null;
            this.currentState.sort = SortType.Latest;
            this.currentState.page = 1;
            this.currentState.search = "";

            //Reset input search
            document.getElementById('searchInput').value = "";
            
            // Tải lại dữ liệu
            this.loadUsers();
        },
        
        // Xử lý sắp xếp
        handleSort: function(sortField) {
            // Hiện tại chỉ hỗ trợ sắp xếp theo tên và id
            if (sortField === 'fullName') {
                // Chuyển đổi giữa các trạng thái sắp xếp
                if (this.currentState.sort === SortType.Ascending) {
                    this.currentState.sort = SortType.Descending;
                } else {
                    this.currentState.sort = SortType.Ascending;
                }
            } else if (sortField === 'id') {
                // Chuyển đổi giữa các trạng thái sắp xếp
                if (this.currentState.sort === SortType.Latest) {
                    this.currentState.sort = SortType.Oldest;
                } else {
                    this.currentState.sort = SortType.Latest;
                }
            } else if (sortField === 'role' || sortField === 'isActive') {
                // Bổ sung logic sắp xếp theo vai trò hoặc trạng thái
                if (this.currentState.sort === SortType.Ascending) {
                    this.currentState.sort = SortType.Descending;
                } else {
                    this.currentState.sort = SortType.Ascending;
                }
            }
            
            // Tải lại dữ liệu
            this.loadUsers();
        },
        
        // Xử lý phân trang
        handlePagination: function(pageNumber) {
            this.currentState.page = pageNumber;
            this.loadUsers();
        },
        
        // Tải danh sách người dùng
        loadUsers: async function() {
            try {
                this.showLoading(true);
                
                // Tạo đối tượng filter từ trạng thái hiện tại
                const filter = createFilterUser({
                    search: this.currentState.search,
                    sort: this.currentState.sort,
                    role: this.currentState.role,
                    isActive: this.currentState.isActive,
                    emailVerified: this.currentState.emailVerified,
                    page: this.currentState.page,
                    pageSize: this.currentState.pageSize,
                    searchTerm: this.currentState.search
                });
                
                // Gọi API để lấy danh sách người dùng
                const response = await userService.find(filter);
                
                if (response && response.success) {
                    console.log("Response user list: ", response);
                    // Lưu tổng số trang và tổng số mục
                    this.currentState.totalItems = response.totalCount;
                    this.currentState.totalPages = Math.ceil(response.totalCount / this.currentState.pageSize);
                    
                    // Hiển thị dữ liệu
                    this.renderUsers(response.data);
                    
                    // Cập nhật phân trang
                    this.renderPagination();
                    
                    // Cập nhật thông tin phân trang
                    this.updatePaginationInfo(response.data.length, response.totalCount);
                } else {
                    this.showError("Không thể tải danh sách người dùng");
                }
                
                this.showLoading(false);
            } catch (error) {
                console.error("Lỗi khi tải danh sách người dùng:", error);
                this.showError(error.message || "Đã xảy ra lỗi khi tải danh sách người dùng");
                this.showLoading(false);
            }
        },
        
        // Hiển thị danh sách người dùng
        renderUsers: function(users) {
            const tableBody = document.getElementById('userTableBody');
            const noDataMessage = document.getElementById('noDataMessage');
            
            // Xóa dữ liệu cũ
            tableBody.innerHTML = '';
            
            if (!users || users.length === 0) {
                tableBody.style.display = 'none';
                noDataMessage.style.display = 'block';
                return;
            }
            
            tableBody.style.display = '';
            noDataMessage.style.display = 'none';
            
            // Hiển thị dữ liệu mới
            users.forEach(user => {
                const row = document.createElement('tr');
                
                // Mã người dùng
                const idCell = document.createElement('td');
                idCell.textContent = `#KH${user.id.toString().padStart(3, '0')}`;
                row.appendChild(idCell);
                
                // Thông tin người dùng
                const infoCell = document.createElement('td');
                infoCell.innerHTML = `
                    <div class="d-flex align-items-center">
                        <img src="${url.baseUrl}/img/Users/${user.imageUrl}" id="user-avatar-${user.id}"
                             class="rounded-circle me-2" width="40" height="40" alt="user"
                             onerror="this.src='/custom/no-image.webp'">
                        <div>
                            <h6 class="mb-0">${user.fullName || 'Không có tên'}</h6>
                            <small class="text-muted">@@${user.email.split('@@')[0]}</small>
                        </div>
                    </div>
                `;
                row.appendChild(infoCell);
                
                // Số điện thoại
                const phoneCell = document.createElement('td');
                phoneCell.textContent = user.phoneNumber || 'Không có';
                row.appendChild(phoneCell);
                
                // Email
                const emailCell = document.createElement('td');
                emailCell.textContent = user.email;
                row.appendChild(emailCell);
                
                // Địa chỉ
                const addressCell = document.createElement('td');
                addressCell.textContent = user.address || 'Không có';
                row.appendChild(addressCell);
                
                // Vai trò người dùng
                const roleCell = document.createElement('td');
                let roleName = '';
                let roleBadgeClass = '';
                
                switch (user.role) {
                    case 1:
                        roleName = 'Quản trị viên';
                        roleBadgeClass = 'bg-primary';
                        break;
                    case 2:
                        roleName = 'Người bán';
                        roleBadgeClass = 'bg-success';
                        break;
                    case 3:
                        roleName = 'Người mua';
                        roleBadgeClass = 'bg-info';
                        break;
                    default:
                        roleName = 'Không xác định';
                        roleBadgeClass = 'bg-secondary';
                }
                
                roleCell.innerHTML = `<span class="badge ${roleBadgeClass}">${roleName}</span>`;
                row.appendChild(roleCell);
                
                // Trạng thái kích hoạt
                const statusCell = document.createElement('td');
                statusCell.innerHTML = `
                    <div class="status-select-container">
                        <select class="form-select form-select-sm status-select" data-user-id="${user.id}" data-original-value="${user.isActive ? '1' : '0'}">
                            <option value="1" ${user.isActive ? 'selected' : ''}>Đang hoạt động</option>
                            <option value="0" ${!user.isActive ? 'selected' : ''}>Ngưng hoạt động</option>
                        </select>
                    </div>
                `;
                row.appendChild(statusCell);
                
                // Thêm sự kiện change cho dropdown
                const statusSelect = statusCell.querySelector('.status-select');
                statusSelect.addEventListener('change', () => {
                    const originalValue = statusSelect.getAttribute('data-original-value');
                    const newValue = statusSelect.value;
                    
                    // Kiểm tra xem giá trị có thay đổi không
                    if (originalValue !== newValue) {
                        statusCell.classList.add('status-changed');
                        this.pendingChanges[user.id] = newValue === '1';
                    } else {
                        statusCell.classList.remove('status-changed');
                        delete this.pendingChanges[user.id];
                    }
                    
                    // Cập nhật nút Save
                    const actionCell = row.querySelector('.action-cell');
                    const saveBtn = actionCell.querySelector('.save-btn');
                    
                    if (Object.keys(this.pendingChanges).includes(user.id.toString())) {
                        saveBtn.style.visibility = 'visible';
                        saveBtn.style.opacity = '1';
                    } else {
                        saveBtn.style.visibility = 'hidden';
                        saveBtn.style.opacity = '0';
                    }
                });
                
                // Thao tác
                const actionCell = document.createElement('td');
                actionCell.className = "action-cell";
                actionCell.innerHTML = `
                    <button class="btn btn-sm btn-success save-btn" data-user-id="${user.id}">Lưu</button>
                    <a href="/Admin/UserDetail?id=${user.id}" class="btn btn-sm btn-info">Chi tiết</a>
                `;
                
                // Thêm sự kiện click cho nút Lưu
                const saveBtn = actionCell.querySelector('.save-btn');
                saveBtn.addEventListener('click', async () => {
                    await this.updateUserStatus(user.id);
                });
                
                row.appendChild(actionCell);
                tableBody.appendChild(row);
            });
        },
        
        // Cập nhật trạng thái người dùng
        updateUserStatus: async function(userId) {
            if (!this.pendingChanges[userId]) {
                return;
            }
            
            const isActive = this.pendingChanges[userId];
            
            try {
                const statusCell = document.querySelector(`.status-select[data-user-id="${userId}"]`).parentElement;
                const saveBtn = document.querySelector(`.save-btn[data-user-id="${userId}"]`);
                
                // Hiển thị loading
                saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
                saveBtn.disabled = true;
                
                // Gọi API để cập nhật trạng thái
                const response = await userService
                    .fetchApi(`/${userId}/active?isActive=${isActive}`, 'PUT');
                
                if (response && response.success) {
                    // Cập nhật UI sau khi lưu thành công
                    const statusSelect = statusCell.querySelector('.status-select');
                    statusSelect.setAttribute('data-original-value', isActive ? '1' : '0');
                    
                    // Xóa khỏi danh sách pending changes
                    delete this.pendingChanges[userId];
                    
                    // Cập nhật UI
                    statusCell.classList.remove('status-changed');
                    saveBtn.style.visibility = 'hidden';
                    saveBtn.style.opacity = '0';
                    
                    // Hiển thị thông báo thành công
                    this.showToast('Cập nhật trạng thái người dùng thành công!', 'success');
                } else {
                    // Xử lý lỗi và hiển thị thông báo
                    this.showToast('Đã xảy ra lỗi khi cập nhật trạng thái người dùng.', 'danger');
                }
            } catch (error) {
                console.error('Lỗi khi cập nhật trạng thái người dùng:', error);
                this.showToast('Đã xảy ra lỗi khi cập nhật trạng thái người dùng.', 'danger');
            } finally {
                // Khôi phục nút Save
                const saveBtn = document.querySelector(`.save-btn[data-user-id="${userId}"]`);
                saveBtn.innerHTML = 'Lưu';
                saveBtn.disabled = false;
            }
        },
        
        // Hiển thị thông báo
        showToast: function(message, type = 'info') {
            // Kiểm tra xem đã có container cho toast chưa
            let toastContainer = document.querySelector('.toast-container');
            
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // Tạo toast element
            const toastId = 'toast-' + Date.now();
            const toastEl = document.createElement('div');
            toastEl.className = `toast fade-in align-items-center text-white bg-${type} border-0`;
            toastEl.setAttribute('role', 'alert');
            toastEl.setAttribute('aria-live', 'assertive');
            toastEl.setAttribute('aria-atomic', 'true');
            toastEl.setAttribute('id', toastId);
            
            toastEl.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            toastContainer.appendChild(toastEl);
            
            // Khởi tạo toast
            const toast = new bootstrap.Toast(toastEl, { autohide: true, delay: 3000 });
            toast.show();
            
            // Xóa toast sau khi ẩn
            toastEl.addEventListener('hidden.bs.toast', function () {
                toastEl.remove();
            });
        },
        
        // Hiển thị phân trang
        renderPagination: function() {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';
            
            if (this.currentState.totalPages <= 1) {
                return;
            }
            
            const _this = this;
            
            // Nút Previous
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${this.currentState.page === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `
                <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            `;
            prevLi.addEventListener('click', function(e) {
                e.preventDefault();
                if (_this.currentState.page > 1) {
                    _this.handlePagination(_this.currentState.page - 1);
                }
            });
            paginationContainer.appendChild(prevLi);
            
            // Tạo các nút trang
            let startPage = Math.max(1, this.currentState.page - 2);
            let endPage = Math.min(this.currentState.totalPages, startPage + 4);
            
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === this.currentState.page ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                
                pageLi.addEventListener('click', function(e) {
                    e.preventDefault();
                    _this.handlePagination(i);
                });
                
                paginationContainer.appendChild(pageLi);
            }
            
            // Nút Next
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${this.currentState.page === this.currentState.totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            `;
            nextLi.addEventListener('click', function(e) {
                e.preventDefault();
                if (_this.currentState.page < _this.currentState.totalPages) {
                    _this.handlePagination(_this.currentState.page + 1);
                }
            });
            paginationContainer.appendChild(nextLi);
        },
        
        // Cập nhật thông tin phân trang
        updatePaginationInfo: function(currentCount, totalCount) {
            const start = (this.currentState.page - 1) * this.currentState.pageSize + 1;
            const end = start + currentCount - 1;
            
            document.getElementById('paginationInfo').textContent = 
                `Hiển thị ${start} đến ${end} trong tổng số ${totalCount} bản ghi`;
        },
        
        // Hiển thị loading
        showLoading: function(isLoading) {
            const tableCard = document.querySelector('.card');
            
            if (isLoading) {
                // Kiểm tra xem đã có overlay chưa
                if (!tableCard.querySelector('.loading-overlay')) {
                    const overlay = document.createElement('div');
                    overlay.className = 'loading-overlay';
                    overlay.innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2">Đang tải dữ liệu...</p>
                        </div>
                    `;
                    tableCard.appendChild(overlay);
                }
            } else {
                // Xóa overlay nếu có
                const overlay = tableCard.querySelector('.loading-overlay');
                if (overlay) {
                    overlay.remove();
                }
            }
        },
        
        // Hiển thị thông báo lỗi
        showError: function(message) {
            const tableBody = document.getElementById('userTableBody');
            tableBody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center text-danger">
                        <i class="bx bx-error-circle me-2"></i> ${message}
                    </td>
                </tr>
            `;
        }
    };

    // Khởi tạo ứng dụng khi tài liệu đã sẵn sàng
    userActivateApp.init();
</script> 