@{
  Layout = "_LayoutAdmin";
  ViewBag.Title = "Tổng Quan";
}
<div class="page-content">
  <!-- Start Container Fluid -->
  <div class="container-fluid">
    <!-- Row 1: Welcome Message -->
    <div class="row">
      <div class="col-12">
        <div class="alert alert-primary text-truncate mb-3" role="alert">
          Chào mừng đến với hệ thống quản lý nông sản! Hôm nay là ngày tốt để
          quản lý và phát triển nông sản của bạn.
        </div>
      </div>
    </div>

    <!-- Row 4: Top Products -->
    <div class="row">
      <div class="col-lg-12">
        <div class="card card-height-100">
          <div
            class="card-header d-flex align-items-center justify-content-between gap-2"
          >
            <h4 class="card-title flex-grow-1">Sản Phẩm Bán Chạy</h4>
            <a href="#" class="btn btn-sm btn-soft-primary">Xem tất cả</a>
          </div>
          
          <!-- Tìm kiếm và bộ lọc cho Sản phẩm bán chạy -->
          <div class="card-body pt-0">
            <div class="row mt-3 mb-3">
              <div class="col-md-4">
                <div class="input-group" id="product-search-form">
                  <input
                    type="text"
                    id="product-search-input"
                    class="form-control"
                    placeholder="Tìm kiếm sản phẩm..."
                  />
                </div>
              </div>
              <div class="col-md-8">
                <div class="d-flex justify-content-md-end gap-2 flex-wrap">
                  <select
                    id="category-filter"
                    class="form-select"
                    style="width: auto"
                  >
                    <option selected>Danh mục</option>
                    <!-- Sẽ được điền bởi JavaScript -->
                  </select>
                  <select
                    id="stock-filter"
                    class="form-select"
                    style="width: auto"
                  >
                    <option selected>Tồn kho</option>
                    <!-- Sẽ được điền bởi JavaScript -->
                  </select>
                  <select
                    id="sort-by-filter"
                    class="form-select"
                    style="width: auto"
                  >
                    <option selected>Sắp xếp theo</option>
                    <!-- Sẽ được điền bởi JavaScript -->
                  </select>
                  <button
                    id="filter-button"
                    class="btn btn-primary"
                    type="button"
                  >
                    Lọc
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="table-responsive">
            <table
              id="product-table"
              class="table table-hover table-nowrap table-centered m-0"
            >
              <thead class="bg-light bg-opacity-50">
                <tr>
                  <th class="text-muted ps-3" data-column="name">
                    Tên sản phẩm
                  </th>
                  <th class="text-muted" data-column="category">Đơn giá</th>
                  <th class="text-muted" data-column="sold">Tồn kho</th>
                  <th class="text-muted" data-column="revenue">Đã bán</th>
                  <th class="text-muted">Xuất xứ</th>
                  <th class="text-muted">Trạng thái</th>
                  <th class="text-muted">Đánh giá</th>
                  <th class="text-muted">Hành động</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
          
          <div class="card-footer border-top">
            <div class="row g-3">
              <div class="col-sm">
                <div class="text-muted">
                  <span class="fw-semibold" id="paging-count"
                    >0 - 0/0 sản phẩm</span
                  >
                </div>
              </div>
              <div class="col-sm-auto">
                <ul class="pagination m-0" id="paging-list">
                  <li class="page-item" id="btn-prev">
                    <a href="#" class="page-link"
                      ><i class="bx bx-left-arrow-alt"></i
                    ></a>
                  </li>
                  <li class="page-item" id="btn-next">
                    <a href="#" class="page-link"
                      ><i class="bx bx-right-arrow-alt"></i
                    ></a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Row 5: Recent Orders -->
    <div class="row">
      <div class="col">
        <div class="card">
          <div class="card-body">
            <div class="d-flex align-items-center justify-content-between">
              <h4 class="card-title">Đơn Hàng Gần Đây</h4>
              <a href="#!" class="btn btn-sm btn-soft-primary">
                <i class="bx bx-plus me-1"></i>Tạo đơn hàng
              </a>
            </div>
            
            <!-- Tìm kiếm và bộ lọc -->
            <div class="row mt-3 mb-3">
              <div class="col-md-4">
                <div class="input-group" id="order-search-form">
                  <input
                    type="text"
                    id="order-search-input"
                    class="form-control"
                    placeholder="Tìm kiếm đơn hàng..."
                  />
                </div>
              </div>
              <div class="col-md-8">
                <div class="d-flex justify-content-md-end gap-2">
                  <select class="form-select" style="width: auto" id="order-status-filter">
                    <option selected value="-999">Trạng thái</option>
                    <!-- Sẽ được điền bởi JavaScript -->
                  </select>
                  <select class="form-select" style="width: auto" id="payment-method-filter">
                    <option selected value="-999">Phương thức thanh toán</option>
                    <!-- Sẽ được điền bởi JavaScript -->
                  </select>
                  <select class="form-select" style="width: auto" id="order-sort-filter">
                    <option selected>Sắp xếp theo</option>
                    <!-- Sẽ được điền bởi JavaScript -->
                  </select>
                  <button class="btn btn-primary" type="button" id="order-filter-button">Lọc</button>
                </div>
              </div>
            </div>
          </div>
          <div class="table-responsive table-centered">
            <table class="table mb-0" id="order-table">
              <thead class="bg-light bg-opacity-50">
                <tr>
                  <th class="ps-3">Mã Đơn</th>
                  <th>Ngày</th>
                  <th>Khách hàng</th>
                  <th>Số điện thoại</th>
                  <th>Địa chỉ</th>
                  <th>Phương thức</th>
                  <th>Trạng thái</th>
                  <th>Hành động</th>
                </tr>
              </thead>
              <tbody id="order-table-body">
                <!-- Dữ liệu sẽ được điền bởi JavaScript -->
                <tr>
                  <td colspan="10" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Đang tải...</span>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          <div class="card-footer border-top">
            <div class="row g-3">
              <div class="col-sm">
                <div class="text-muted" id="order-paging-count">
                  Đang tải dữ liệu...
                </div>
              </div>
              <div class="col-sm-auto">
                <ul class="pagination m-0" id="order-paging-list">
                  <li class="page-item" id="order-btn-prev">
                    <a href="#" class="page-link"
                      ><i class="bx bx-left-arrow-alt"></i
                    ></a>
                  </li>
                  <li class="page-item" id="order-btn-next">
                    <a href="#" class="page-link"
                      ><i class="bx bx-right-arrow-alt"></i
                    ></a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- End Container Fluid -->

  <!-- ========== Footer Start ========== -->
  <footer class="footer">
    <div class="container-fluid">
      <div class="row">
        <div class="col-12 text-center">
          &copy; Hệ Thống Quản Lý Nông Sản VNFarm. All rights reserved.
        </div>
      </div>
    </div>
  </footer>
  <!-- ========== Footer End ========== -->
</div>
<script type="module">
  import { BaseService } from "/custom/BaseService.js";
  import createFilterProduct from "/custom/filterProduct.js";
  import createFilterOrder from "/custom/filterOrder.js";
  import { SortType } from "/custom/Enum.js";
  import { EnumService } from "/custom/EnumService.js";
  import url from "/Custom/endpoints.js";
  import key from "/Custom/jwt.js";

  const jwt = key;
  const enumService = new EnumService(url.baseUrl, jwt);
  const productUrl = url.base + "/Product";
  const productService = new BaseService(productUrl, jwt);
  const categoryUrl = url.base + "/Category";
  const categoryService = new BaseService(categoryUrl, jwt);

  const appProduct = {
    filter: new createFilterProduct({
      searchTerm: "",
      sortBy: SortType.Latest,
      page: 1,
      pageSize: 10,
    }),
    init: function () {
      new Promise((resolve, reject) => {
        this.loadCategory();
        this.loadStockFilter();
        this.loadSortType();
        this.handleFilterFunction();
        this.handleSearchFunction();
        this.handlePagingFunction();
        resolve();
      })
        .then(() => {
          document.getElementById("filter-button").click();
        })
        .catch((error) => {
          console.error("Error initializing appProduct:", error);
        });
    },
    loadCategory: function () {
      //Load danh mục vào dropdown
      const categoryDropdown = document.getElementById("category-filter");
      categoryDropdown.innerHTML =
        "<option value ='-999' selected>Tất cả</option>";
      categoryService
        .getAll()
        .then((data) => {
          let items = data.data;
          items.forEach((item) => {
            const option = document.createElement("option");
            option.value = item.id;
            option.textContent = item.name;
            categoryDropdown.appendChild(option);
          });
        })
        .catch((error) => {
      console.error("Error retrieving category:", error);
        });
    },
    loadStockFilter: function () {
      const stockDropdown = document.getElementById("stock-filter");
      stockDropdown.innerHTML = "<option value ='1' selected>Còn hàng</option>";
      stockDropdown.innerHTML += "<option value ='0'>Hết hàng</option>";
    },
    loadSortType: function () {
      const sortByDropdown = document.getElementById("sort-by-filter");
      sortByDropdown.innerHTML = "";
      enumService.getSortTypesByEntity("Product").then((data) => {
        let items = data;
        Object.keys(items).forEach((key) => {
          const option = document.createElement("option");
          option.value = key;
          option.textContent = items[key];
          sortByDropdown.appendChild(option);
        });
      });
    },
    handleFilterFunction() {
      const filterButton = document.getElementById("filter-button");
      let _this = this;
      filterButton.addEventListener("click", () => {
        let categoryId = document.getElementById("category-filter").value;
        let stock = document.getElementById("stock-filter").value;
        let sortBy = document.getElementById("sort-by-filter").value;
        if (categoryId) {
          _this.filter.categoryId = parseInt(categoryId);
        }
        if (stock) {
          _this.filter.isInStock = parseInt(stock) == 1 ? true : false;
        }
        if (sortBy) {
          _this.filter.sortBy = parseInt(sortBy);
        }
        _this.filter.page = 1;
        console.log(_this.filter);
        productService
          .find(_this.filter)
          .then((data) => {
            console.log(data);
            let items = data.data;
            _this.reloadTable(items);
            //Cập nhật paging-count
            let start = (_this.filter.page - 1) * _this.filter.pageSize + 1;
            let end = start + items.length - 1;
            let totalCount = data.totalCount;
            document.getElementById(
              "paging-count"
            ).textContent = `Hiển thị ${start} - ${end}/${totalCount} sản phẩm`;
            //Cập nhật paging-list
            let pagingList = document.getElementById("paging-list");
            pagingList.innerHTML = `<li class="page-item">
                    <a href="#" class="page-link" id="btn-prev"><i class="bx bx-left-arrow-alt"></i></a>
                  </li>`;
            for (
              let i = 1;
              i <= Math.ceil(totalCount / _this.filter.pageSize);
              i++
            ) {
              let li = document.createElement("li");
              li.classList.add("page-item");
              li.addEventListener("click", () => {
                _this.filter.page = i;
                document.getElementById("filter-button").click();
              });

              let a = document.createElement("a");
              a.classList.add("page-link");
              a.textContent = i;
              a.href = "#";

              li.appendChild(a);

              if (i == _this.filter.page) {
                li.classList.add("active");
              }

              pagingList.appendChild(li);
            }
            pagingList.innerHTML += `<li class="page-item">
                    <a href="#" class="page-link" id="btn-next"><i class="bx bx-right-arrow-alt"></i></a>
                  </li>`;
          })
          .catch((error) => {
            console.log("Error retrieving product:", error);
          });
      });
    },
    reloadTable(items) {
      const tableProduct = document.getElementById("product-table");
      tableProduct.querySelector("tbody").innerHTML = "";

      items.forEach((item) => {
        // Tạo một hàng mới cho bảng
        const row = document.createElement("tr");

        // Tạo các ô dữ liệu
        const nameCell = document.createElement("td");
        nameCell.classList.add("p-3");
        nameCell.textContent = item.name;

        const priceCell = document.createElement("td");
        priceCell.textContent = new Intl.NumberFormat("vi-VN", {
          style: "currency",
          currency: "VND",
        }).format(item.price);

        const stockCell = document.createElement("td");
        stockCell.textContent = item.stockQuantity;

        const soldCell = document.createElement("td");
        soldCell.textContent = item.soldQuantity;

        const originCell = document.createElement("td");
        originCell.textContent = item.origin;

        const statusCell = document.createElement("td");
        const statusBadge = document.createElement("span");
        statusBadge.className = item.isActive
          ? "badge bg-success"
          : "badge bg-danger";
        statusBadge.textContent = item.isActive ? "Đang bán" : "Ngừng bán";
        statusCell.appendChild(statusBadge);

        const ratingCell = document.createElement("td");
        ratingCell.textContent = item.averageRating
          ? item.averageRating.toFixed(1)
          : "Chưa có";

        const actionCell = document.createElement("td");
        actionCell.innerHTML = `
              <a class="btn btn-sm btn-info detail-product" href="/Admin/ProductDetail?id=${item.id}">
                Chi tiết SP
              </a>
              <a class="btn btn-sm btn-primary edit-product" href="/Admin/ProductEdit?id=${item.id}">
                Sửa SP
              </a>
              <a class="btn btn-sm btn-danger delete-product" data-id="${item.id}">
                Xóa SP
              </a>
            `;

        // Thêm các ô vào hàng
        row.appendChild(nameCell);
        row.appendChild(priceCell);
        row.appendChild(stockCell);
        row.appendChild(soldCell);
        row.appendChild(originCell);
        row.appendChild(statusCell);
        row.appendChild(ratingCell);
        row.appendChild(actionCell);

        // Thêm hàng vào bảng
        tableProduct.querySelector("tbody").appendChild(row);
      });
    },
    handleSearchFunction() {
      const searchInput = document.getElementById("product-search-input");
      const searchButton = document.getElementById("product-search-button");
      let _this = this;
      searchInput.addEventListener("input", () => {
        _this.filter.searchTerm = searchInput.value;
      });
    },
    handlePagingFunction() {
      document.getElementById("paging-list").addEventListener("click", (e) => {
        const _this = this;
        const btn = e.target.closest("a");
        console.log(btn);

        if (!btn) return;

        if (btn.id === "btn-prev") {
          _this.filter.page--;
          document.getElementById("filter-button").click();
          e.preventDefault();
        }

        if (btn.id === "btn-next") {
          _this.filter.page++;
          document.getElementById("filter-button").click();
          e.preventDefault();
        }
      });
    },
  };

  const appOrder = {
    filter: new createFilterOrder({
      searchTerm: "",
      sortBy: SortType.Latest,
      page: 1,
      pageSize: 10,
    }),
    statuses : {},
    paymentMethods : {},
    init: function () {
      new Promise((resolve, reject) => {
        this.loadOrderStatuses();
        this.loadPaymentMethods();
        this.loadSortType();
        this.handleFilterFunction();
        this.handleSearchFunction();
        this.handlePagingFunction();
        resolve();
      })
        .then(() => {
          document.getElementById("order-filter-button").click();
        })
        .catch((error) => {
          console.error("Error initializing appOrder:", error);
        });
    },
    loadOrderStatuses: function () {
      // Load trạng thái đơn hàng vào dropdown
      const statusDropdown = document.getElementById("order-status-filter");
      statusDropdown.innerHTML = "<option value='-999' selected>Tất cả trạng thái</option>";
      
      enumService.getOrderStatuses()
        .then((data) => {
          if (data) {
            Object.keys(data).forEach((key) => {
              const option = document.createElement("option");
              option.value = key;
              option.textContent = data[key];
              statusDropdown.appendChild(option);
              this.statuses[key] = data[key];
            });
            console.log(this.statuses);
          }
        })
        .catch((error) => {
          console.error("Error retrieving order statuses:", error);
        });
    },
    loadPaymentMethods: function () {
      // Load phương thức thanh toán vào dropdown
      const paymentDropdown = document.getElementById("payment-method-filter");
      paymentDropdown.innerHTML = "<option value='-999' selected>Tất cả phương thức</option>";
      
      enumService.getPaymentMethods()
        .then((data) => {
          if (data && data.success && data.data) {
            Object.keys(data.data).forEach((key) => {
              const option = document.createElement("option");
              option.value = key;
              option.textContent = data.data[key];
              paymentDropdown.appendChild(option);
              this.paymentMethods[key] = data.data[key];
            });
            console.log(this.paymentMethods);
          }
        })
        .catch((error) => {
          console.error("Error retrieving payment methods:", error);
        });
    },
    loadSortType: function () {
      const sortByDropdown = document.getElementById("order-sort-filter");
      sortByDropdown.innerHTML = "";
      
      enumService.getSortTypesByEntity("Order")
        .then((data) => {
          if (data) {
            Object.keys(data).forEach((key) => {
              const option = document.createElement("option");
              option.value = key;
              option.textContent = data[key];
              sortByDropdown.appendChild(option);
            });
          }
        })
        .catch((error) => {
          console.error("Error retrieving sort types:", error);
          // Thêm các lựa chọn mặc định nếu API thất bại
          const defaultSortOptions = [
            { value: SortType.Latest.toString(), text: "Mới nhất" },
            { value: SortType.Oldest.toString(), text: "Cũ nhất" },
          ];
          
          defaultSortOptions.forEach(option => {
            const optionElement = document.createElement("option");
            optionElement.value = option.value;
            optionElement.textContent = option.text;
            sortByDropdown.appendChild(optionElement);
          });
        });
    },
    handleFilterFunction() {
      const filterButton = document.getElementById("order-filter-button");
      let _this = this;
      
      filterButton.addEventListener("click", () => {
        const statusId = document.getElementById("order-status-filter").value;
        const paymentMethodId = document.getElementById("payment-method-filter").value;
        const sortBy = document.getElementById("order-sort-filter").value;
        
        if (statusId && statusId !== "-999") {
          _this.filter.status = parseInt(statusId);
        } else {
          _this.filter.status = -999;
        }
        
        if (paymentMethodId && paymentMethodId !== "-999") {
          _this.filter.paymentMethod = parseInt(paymentMethodId);
        } else {
          _this.filter.paymentMethod = -999;
        }
        
        if (sortBy && sortBy !== "-999") {
          _this.filter.sortBy = parseInt(sortBy);
        }
        _this.filter.page = 1;
        console.log("Order filter:", _this.filter);
        
        // API call sử dụng BaseService
        const orderUrl = url.base + "/Order";
        const orderService = new BaseService(orderUrl, jwt);
        
        orderService.find(_this.filter)
          .then((data) => {
            console.log("Order data:", data);
            if (data && data.success) {
              const items = data.data || [];
              _this.reloadTable(items);
              
              // Cập nhật phân trang
              const start = (_this.filter.page - 1) * _this.filter.pageSize + 1;
              const end = start + items.length - 1;
              const totalCount = data.totalCount || 0;
              
              document.getElementById("order-paging-count").textContent = 
                `Hiển thị ${start} - ${end}/${totalCount} đơn hàng`;
              
              // Cập nhật danh sách phân trang
              const pagingList = document.getElementById("order-paging-list");
              pagingList.innerHTML = `
                <li class="page-item">
                  <a href="#" class="page-link" id="order-btn-prev">
                    <i class="bx bx-left-arrow-alt"></i>
                  </a>
                </li>`;
              
              const totalPages = Math.ceil(totalCount / _this.filter.pageSize);
              
              for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement("li");
                li.classList.add("page-item");
                
                if (i === _this.filter.page) {
                  li.classList.add("active");
                }
                
                li.addEventListener("click", () => {
                  _this.filter.page = i;
                  document.getElementById("order-filter-button").click();
                });
                
                const a = document.createElement("a");
                a.classList.add("page-link");
                a.textContent = i;
                a.href = "#";
                
                li.appendChild(a);
                pagingList.appendChild(li);
              }
              
              pagingList.innerHTML += `
                <li class="page-item">
                  <a href="#" class="page-link" id="order-btn-next">
                    <i class="bx bx-right-arrow-alt"></i>
                  </a>
                </li>`;
              
              // Vô hiệu hóa nút Prev nếu đang ở trang đầu tiên
              if (_this.filter.page === 1) {
                document.getElementById("order-btn-prev").parentElement.classList.add("disabled");
              }
              
              // Vô hiệu hóa nút Next nếu đang ở trang cuối cùng
              if (_this.filter.page === totalPages) {
                document.getElementById("order-btn-next").parentElement.classList.add("disabled");
              }
            } else {
              // Hiển thị thông báo lỗi
              document.getElementById("order-table-body").innerHTML = `
                <tr>
                  <td colspan="10" class="text-center text-danger">
                    Không thể tải dữ liệu đơn hàng. Vui lòng thử lại sau.
                  </td>
                </tr>`;
              
              document.getElementById("order-paging-count").textContent = "Không có dữ liệu";
            }
          })
          .catch((error) => {
            console.error("Error retrieving orders:", error);
            document.getElementById("order-table-body").innerHTML = `
              <tr>
                <td colspan="10" class="text-center text-danger">
                  Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.
                </td>
              </tr>`;
            
            document.getElementById("order-paging-count").textContent = "Đã xảy ra lỗi";
          });
      });
    },
    reloadTable(items) {
      const tableBody = document.getElementById("order-table-body");
      tableBody.innerHTML = "";
      
      if (!items || items.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="10" class="text-center">
              Không tìm thấy đơn hàng nào phù hợp với điều kiện tìm kiếm.
            </td>
          </tr>`;
        return;
      }
      
      items.forEach((order) => {
        // Tạo một hàng mới cho mỗi đơn hàng
        const row = document.createElement("tr");
        
        // Định dạng trạng thái đơn hàng / trạng thái thanh toán / phương thức thanh toán
        let statusClass = this.statuses[order.status];
        let paymentMethodClass = this.paymentMethods[order.paymentMethod];
        
        // Định dạng ngày đặt hàng
        const orderDate = new Date(order.createdAt);
        const formattedDate = orderDate.toLocaleDateString("vi-VN");

        //Thông tin về Khách hàng
        let customerName = order.buyer.fullName || 'Khách vãng lai';
        let customerPhone = order.buyer.phoneNumber || '---';
        let customerAddress = order.buyer.address || '---';
        
        // Tạo nội dung hàng
        row.innerHTML = `
          <td class="ps-3">
            <a href="00_layout.html?file=00_order_detail.html?id=${order.id}">#${order.orderCode || order.id}</a>
          </td>
          <td>${formattedDate}</td>
          <td>
            <a href="#!">${customerName}</a>
          </td>
          <td>${customerPhone}</td>
          <td>${customerAddress}</td>
          <td>${paymentMethodClass}</td>
          <td>
            ${statusClass}
          </td>
          <td>
            <div class="dropdown">
              <button class="btn btn-sm btn-light" type="button" data-bs-toggle="dropdown">
                <i class="bx bx-dots-horizontal-rounded"></i>
              </button>
              <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="/Admin/OrderDetail?orderCode=${order.id}">Xem chi tiết</a></li>
                <li><a class="dropdown-item update-status" data-id="${order.id}" href="#">Cập nhật trạng thái</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-danger cancel-order" data-id="${order.id}" href="#">Hủy đơn hàng</a></li>
              </ul>
            </div>
          </td>
        `;
        
        // Thêm hàng vào bảng
        tableBody.appendChild(row);
      });
      
      // Thêm event listeners cho các nút trong bảng
      this.addTableEventListeners();
    },
    addTableEventListeners() {
      // Event listener cho nút cập nhật trạng thái
      document.querySelectorAll('.update-status').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const orderId = button.getAttribute('data-id');
          console.log(`Cập nhật trạng thái cho đơn hàng ${orderId}`);
          // TODO: Hiển thị modal cập nhật trạng thái
        });
      });
      
      // Event listener cho nút hủy đơn hàng
      document.querySelectorAll('.cancel-order').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const orderId = button.getAttribute('data-id');
          
          if (confirm('Bạn có chắc chắn muốn hủy đơn hàng này?')) {
            console.log(`Hủy đơn hàng ${orderId}`);
            // TODO: Gọi API để hủy đơn hàng
          }
        });
      });
    },
    handleSearchFunction() {
      const searchInput = document.getElementById("order-search-input");
      let _this = this;
      
      // Sự kiện khi nhập vào ô tìm kiếm
      searchInput.addEventListener("input", () => {
        _this.filter.searchTerm = searchInput.value;
      });
      
      // Sự kiện khi nhấn Enter trong ô tìm kiếm
      searchInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          _this.filter.page = 1; // Reset về trang 1
          document.getElementById("order-filter-button").click();
          e.preventDefault();
        }
      });
    },
    handlePagingFunction() {
      const _this = this;
      
      // Sự kiện cho nút Previous
      document.addEventListener('click', function(e) {
        if (e.target.closest('#order-btn-prev')) {
          e.preventDefault();
          if (_this.filter.page > 1) {
            _this.filter.page--;
            document.getElementById("order-filter-button").click();
          }
        }
      });
      
      // Sự kiện cho nút Next
      document.addEventListener('click', function(e) {
        if (e.target.closest('#order-btn-next')) {
          e.preventDefault();
          _this.filter.page++;
          document.getElementById("order-filter-button").click();
        }
      });
    }
  };

  // Khởi động cả hai ứng dụng
  appProduct.init();
  appOrder.init();
</script>
