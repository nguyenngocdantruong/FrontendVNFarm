@{
    Layout = "_LayoutAdmin";
    ViewBag.Title = "Danh Sách Shop";
}

<div class="page-content">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="card-title">Danh Sách Shop</h4>
                    <div>
                        <button class="btn btn-primary" type="button" data-bs-toggle="modal"
                            data-bs-target="#filterModal">
                            <i class="bx bx-filter-alt"></i> Tìm kiếm & Lọc
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-centered table-nowrap mb-0" id="shop-table">
                            <thead>
                                <tr>
                                    <th>Mã ID</th>
                                    <th>Tên Shop</th>
                                    <th>Chủ Shop</th>
                                    <th>Số Điện Thoại</th>
                                    <th>Email</th>
                                    <th>Địa Chỉ</th>
                                    <th>Thao Tác</th>
                                </tr>
                            </thead>
                            <tbody id="shop-table-body">
                                <!-- Loading indicator -->
                                <tr>
                                    <td colspan="8" class="text-center">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Đang tải...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Phân trang -->
                    <div class="row mt-3">
                        <div class="col-sm">
                            <div class="text-muted" id="shop-paging-count">
                                Đang tải dữ liệu...
                            </div>
                        </div>
                        <div class="col-sm-auto">
                            <ul class="pagination m-0" id="shop-paging-list">
                                <li class="page-item" id="shop-btn-prev">
                                    <a href="#" class="page-link"><i class="bx bx-left-arrow-alt"></i></a>
                                </li>
                                <li class="page-item" id="shop-btn-next">
                                    <a href="#" class="page-link"><i class="bx bx-right-arrow-alt"></i></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Lọc -->
<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Tìm kiếm & Lọc Danh Sách Shop</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="shop-filter-form">
                    <div class="mb-3">
                        <label class="form-label">Tìm kiếm</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="filter-search-input"
                                placeholder="Tìm kiếm theo tên shop, mô tả shop...">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Sắp Xếp Theo</label>
                        <select class="form-select" id="filter-sort-select">
                            <!-- Sẽ được điền bởi JavaScript -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Trạng Thái</label>
                        <select class="form-select" id="filter-status-select">
                            <!-- Sẽ được điền bởi JavaScript -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Loại Shop</label>
                        <select class="form-select" id="filter-type-select">
                            <!-- Sẽ được điền bởi JavaScript -->
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="apply-filter-button">Áp Dụng</button>
            </div>
        </div>
    </div>
</div>

<script type="module">
    import { BaseService } from "/custom/BaseService.js";
    import createFilterStore from "/custom/filterStore.js";
    import { SortType } from "/custom/Enum.js";
    import { EnumService } from "/custom/EnumService.js";
    import key from "/custom/jwt.js";
    import url from "/Custom/endpoints.js";
    import Toast from "/Custom/Toast_Seller.js";

    const jwt = key;
    const enumService = new EnumService(url.baseUrl, jwt);
    const storeService = new BaseService(
        url.base + "/Store",
        jwt
    );

    const appShop = {
        filter: new createFilterStore({
            searchTerm: "",
            sortBy: SortType.Latest,
            page: 1,
            pageSize: 10,
            status: -999,
            type: -999
        }),
        shopStatuses: {},
        shopTypes: {},

        init: function () {
            new Promise((resolve, reject) => {
                this.loadShopStatuses();
                this.loadShopTypes();
                this.loadSortType();
                this.handleFilterFunction();
                this.handleSearchFunction();
                this.handlePagingFunction();
                this.handleModalFilter();
                resolve();
            })
                .then(() => {
                    document.getElementById("apply-filter-button").click();
                })
                .catch((error) => {
                    console.error("Error initializing appShop:", error);
                });
        },

        loadShopStatuses: function () {
            // Load trạng thái shop vào dropdown
            const modalStatusDropdown = document.getElementById("filter-status-select");
            modalStatusDropdown.innerHTML = "<option value='-999' selected>Tất cả</option>";

            enumService.getShopStatuses()
                .then((data) => {
                    if (data) {
                        Object.keys(data).forEach((key) => {
                            // Thêm vào dropdown trong modal
                            const modalOption = document.createElement("option");
                            modalOption.value = key;
                            modalOption.textContent = data[key];
                            modalStatusDropdown.appendChild(modalOption);

                            this.shopStatuses[key] = data[key];
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving shop statuses:", error);
                    // Thêm các giá trị mặc định nếu API thất bại
                    const defaultStatuses = [
                        { value: "1", text: "Đang Hoạt Động" },
                        { value: "2", text: "Tạm Ngưng" },
                        { value: "3", text: "Bị Khóa" }
                    ];

                    defaultStatuses.forEach(status => {
                        // Thêm vào dropdown trong modal
                        const modalOption = document.createElement("option");
                        modalOption.value = status.value;
                        modalOption.textContent = status.text;
                        modalStatusDropdown.appendChild(modalOption);

                        this.shopStatuses[status.value] = status.text;
                    });
                });
        },

        loadShopTypes: function () {
            // Load trạng thái xác thực vào dropdown
            const modalTypeDropdown = document.getElementById("filter-type-select");
            modalTypeDropdown.innerHTML = "<option value='-999' selected>Tất cả</option>";

            enumService.getShopTypes()
                .then((data) => {
                    if (data) {
                        Object.keys(data).forEach((key) => {
                            // Thêm vào dropdown trong modal
                            const modalOption = document.createElement("option");
                            modalOption.value = key;
                            modalOption.textContent = data[key];
                            modalTypeDropdown.appendChild(modalOption);

                            this.shopTypes[key] = data[key];
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving shop types:", error);
                    // Thêm các giá trị mặc định nếu API thất bại
                    const defaultShopTypes = [
                        { value: "-1", text: "Không thể load dữ liệu" },
                    ];

                    defaultShopTypes.forEach(type => {
                        // Thêm vào dropdown trong modal
                        const modalOption = document.createElement("option");
                        modalOption.value = type.value;
                        modalOption.textContent = type.text;
                        modalTypeDropdown.appendChild(modalOption);

                        this.shopTypes[type.value] = type.text;
                    });
                });
        },

        loadSortType: function () {
            const modalSortDropdown = document.getElementById("filter-sort-select");
            modalSortDropdown.innerHTML = "";

            enumService.getSortTypesByEntity("Store")
                .then((data) => {
                    if (data) {
                        Object.keys(data).forEach((key) => {
                            // Thêm vào dropdown trong modal
                            const modalOption = document.createElement("option");
                            modalOption.value = key;
                            modalOption.textContent = data[key];
                            modalSortDropdown.appendChild(modalOption);
                        });
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving sort types:", error);
                    // Thêm các lựa chọn mặc định nếu API thất bại
                    const defaultSortOptions = [
                        { value: SortType.Latest.toString(), text: "Mới nhất" },
                        { value: SortType.Oldest.toString(), text: "Cũ nhất" },
                        { value: "3", text: "Tên shop (A-Z)" },
                        { value: "4", text: "Tên shop (Z-A)" }
                    ];

                    defaultSortOptions.forEach(option => {
                        // Thêm vào dropdown trong modal
                        const modalOption = document.createElement("option");
                        modalOption.value = option.value;
                        modalOption.textContent = option.text;
                        modalSortDropdown.appendChild(modalOption);
                    });
                });
        },

        handleFilterFunction() {
            let _this = this;
            // Gọi API để lấy danh sách shop theo bộ lọc
            storeService.find(_this.filter)
                .then((data) => {
                    console.log("Success retrieve data:", data);
                    if (data && data.success) {
                        const items = data.data || [];
                        _this.reloadTable(items);

                        // Cập nhật phân trang
                        const start = (_this.filter.page - 1) * _this.filter.pageSize + 1;
                        const end = start + items.length - 1;
                        const totalCount = data.totalCount || 0;

                        document.getElementById("shop-paging-count").textContent =
                            `Hiển thị ${start} - ${end}/${totalCount} shop`;

                        // Cập nhật danh sách phân trang
                        const pagingList = document.getElementById("shop-paging-list");
                        pagingList.innerHTML = `
                                <li class="page-item">
                                    <a href="#" class="page-link" id="shop-btn-prev">
                                        <i class="bx bx-left-arrow-alt"></i>
                                    </a>
                                </li>`;

                        const totalPages = Math.ceil(totalCount / _this.filter.pageSize);

                        for (let i = 1; i <= totalPages; i++) {
                            const li = document.createElement("li");
                            li.classList.add("page-item");
                            if (parseInt(i) === parseInt(_this.filter.page)) {
                                li.classList.add("active");
                            }

                            li.addEventListener("click", () => {
                                _this.filter.page = i;
                                document.getElementById("apply-filter-button").click();
                            });

                            const a = document.createElement("a");
                            a.classList.add("page-link");
                            a.textContent = i;
                            a.href = "#";

                            li.appendChild(a);
                            pagingList.appendChild(li);
                        }

                        pagingList.innerHTML += `
                                <li class="page-item">
                                    <a href="#" class="page-link" id="shop-btn-next">
                                        <i class="bx bx-right-arrow-alt"></i>
                                    </a>
                                </li>`;

                        // Vô hiệu hóa nút Prev nếu đang ở trang đầu tiên
                        if (_this.filter.page === 1) {
                            document.getElementById("shop-btn-prev").parentElement.classList.add("disabled");
                        }

                        // Vô hiệu hóa nút Next nếu đang ở trang cuối cùng
                        if (_this.filter.page === totalPages) {
                            document.getElementById("shop-btn-next").parentElement.classList.add("disabled");
                        }

                        // Đóng modal nếu đang mở
                        const filterModal = bootstrap.Modal.getInstance(document.getElementById('filterModal'));
                        if (filterModal) {
                            filterModal.hide();
                        }
                    } else {
                        // Hiển thị thông báo lỗi
                        document.getElementById("shop-table-body").innerHTML = `
                                <tr>
                                    <td colspan="8" class="text-center text-danger">
                                        Không thể tải dữ liệu shop. Vui lòng thử lại sau.
                                    </td>
                                </tr>`;

                        document.getElementById("shop-paging-count").textContent = "Không có dữ liệu";
                    }
                })
                .catch((error) => {
                    console.error("Error retrieving shops:", error);
                    document.getElementById("shop-table-body").innerHTML = `
                            <tr>
                                <td colspan="8" class="text-center text-danger">
                                    Đã xảy ra lỗi khi tải dữ liệu. Vui lòng thử lại sau.
                                </td>
                            </tr>`;

                    document.getElementById("shop-paging-count").textContent = "Đã xảy ra lỗi";
                });
        },

        reloadTable(items) {
            const tableBody = document.getElementById("shop-table-body");
            tableBody.innerHTML = "";

            if (!items || items.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center">
                            Không tìm thấy shop nào phù hợp với điều kiện tìm kiếm.
                        </td>
                    </tr>`;
                return;
            }

            items.forEach((shop) => {
                // Tạo một hàng mới cho mỗi shop
                const row = document.createElement("tr");

                // Định dạng trạng thái shop
                let statusClass = "";
                let statusText = this.shopStatuses[shop.verificationStatus] || "Không xác định";

                switch (parseInt(shop.verificationStatus)) {
                    case 1: // Đang hoạt động
                        statusClass = "bg-success";
                        break;
                    case 0: // Tạm ngưng
                        statusClass = "bg-warning";
                        break;
                    case -1: // Bị khóa
                        statusClass = "bg-danger";
                        break;
                    default:
                        statusClass = "bg-secondary";
                }

                // Lấy thông tin về shop
                let shopName = shop.name || 'Shop không tên';
                let shopCode = shop.id || `#${shop.id}`;
                let ownerName = shop?.owner?.fullName || 'Không có thông tin';
                let phoneNumber = shop.phoneNumber || '---';
                let email = shop.email || '---';
                let address = shop.address || '---';
                let shopImageUrl = shop.logoUrl;

                // Tạo nội dung hàng
                row.innerHTML = `
                    <td>${shopCode}</td>
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${url.baseUrl}/img/Stores/${shopImageUrl}" class="rounded-circle me-2" width="40" height="40" alt="shop" onerror="this.src='/custom/default.jpg'">
                            <div>
                                <h6 class="mb-0">${shopName}</h6>
                                <small class="text-muted">${email}</small>
                            </div>
                        </div>
                    </td>
                    <td>${ownerName}</td>
                    <td>${phoneNumber}</td>
                    <td>${email}</td>
                    <td>${address}</td>
                    <td>
                        <div class="d-flex gap-2">
                            <a href="/Admin/ShopDetail?id=${shop.id}" class="btn btn-sm btn-primary">
                                <i class="bx bx-detail"></i> Chi tiết
                            </a>
                            <button class="btn btn-sm btn-danger delete-shop" data-id="${shop.id}">
                                <i class="bx bx-trash"></i> Xóa
                            </button>
                        </div>
                    </td>
                `;

                // Thêm hàng vào bảng
                tableBody.appendChild(row);
            });

            // Thêm event listeners cho các nút trong bảng
            this.addTableEventListeners();
        },

        addTableEventListeners() {
            // Event listener cho nút xóa shop
            document.querySelectorAll('.delete-shop').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const shopId = button.getAttribute('data-id');

                    if (confirm('Bạn có chắc chắn muốn xóa shop này?')) {
                        console.log(`Xóa shop ${shopId}`);
                        // TODO: Gọi API để xóa shop
                        storeService.delete(shopId)
                            .then(response => {
                                if (response.success) {
                                    Toast.success('Xóa shop thành công!');
                                    document.getElementById("apply-filter-button").click();
                                } else {
                                    Toast.error('Xóa shop thất bại: ' + response.message);
                                }
                            })
                            .catch(error => {
                                console.error('Lỗi khi xóa shop:', error);
                                Toast.error('Đã xảy ra lỗi khi xóa shop. Vui lòng thử lại.');
                            });
                    }
                });
            });
        },

        handleSearchFunction() {
            const _this = this;

            // Sự kiện khi nhập vào ô tìm kiếm trong modal
            document.getElementById("filter-search-input").addEventListener("input", function () {
                _this.filter.searchTerm = this.value;
            });
        },

        handlePagingFunction() {
            const _this = this;

            // Sự kiện cho nút Previous
            document.addEventListener('click', function (e) {
                if (e.target.closest('#shop-btn-prev')) {
                    e.preventDefault();
                    if (_this.filter.page > 1) {
                        _this.filter.page--;
                        _this.handleFilterFunction();
                    }
                }
            });

            // Sự kiện cho nút Next
            document.addEventListener('click', function (e) {
                if (e.target.closest('#shop-btn-next')) {
                    e.preventDefault();
                    _this.filter.page = parseInt(_this.filter.page) + 1;
                    _this.handleFilterFunction();
                }
            });
        },

        handleModalFilter() {
            const _this = this;
            const applyFilterButton = document.getElementById("apply-filter-button");

            applyFilterButton.addEventListener("click", function () {
                const modalSearchInput = document.getElementById("filter-search-input");
                const modalStatusSelect = document.getElementById("filter-status-select");
                const modalTypeSelect = document.getElementById("filter-type-select");
                const modalSortSelect = document.getElementById("filter-sort-select");

                // Cập nhật bộ lọc từ giá trị trong modal
                _this.filter.searchTerm = modalSearchInput.value;
                _this.filter.status = modalStatusSelect.value !== "-999" ? parseInt(modalStatusSelect.value) : -999;
                _this.filter.type = modalTypeSelect.value !== "-999" ? parseInt(modalTypeSelect.value) : -999;
                _this.filter.sortBy = parseInt(modalSortSelect.value) || SortType.Latest;
                _this.filter.page = 1; // Reset về trang 1

                _this.handleFilterFunction();
            });
        }
    };

    appShop.init();
</script>