@{
    Layout = "_LayoutSeller";
    ViewBag.Title = "Ch·ªânh s·ª≠a s·∫£n ph·∫©m";
}

<main class="nxl-container">
    <div class="nxl-content">
        <!-- [ page-header ] start -->
        <div class="page-header">
            <div class="page-header-left d-flex align-items-center">
                <div class="page-header-title">
                    <h5 class="m-b-10">Ch·ªânh S·ª≠a S·∫£n Ph·∫©m</h5>
                </div>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="index.html">Trang ch·ªß</a></li>
                    <li class="breadcrumb-item"><a href="00_seller_product_lists.html">S·∫£n ph·∫©m</a></li>
                    <li class="breadcrumb-item">Ch·ªânh s·ª≠a</li>
                </ul>
            </div>
            <div class="page-header-right ms-auto">
                <div class="page-header-right-items">
                    <div class="d-flex align-items-center gap-2 page-header-right-items-wrapper">
                        <a href="00_seller_product_lists.html" class="btn btn-light">
                            <i class="feather-arrow-left me-2"></i>
                            Quay L·∫°i
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ page-header ] end -->
        <!-- [ Main Content ] start -->
        <div class="main-content">
            <div class="row">
                <div class="col-xxl-12">
                    <div class="card stretch stretch-full">
                        <div class="card-body">
                            <form id="productEditForm">
                                <input type="hidden" id="productId" name="id">
                                <div class="row">
                                    <div class="col-md-8">
                                        <div class="mb-3">
                                            <label class="form-label">T√™n s·∫£n ph·∫©m</label>
                                            <input type="text" class="form-control" id="productName" name="name" value="ƒêang t·∫£i ..." required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">M√¥ t·∫£ s·∫£n ph·∫©m</label>
                                            <textarea class="form-control" id="productDescription" name="description" rows="4" required>ƒêang t·∫£i ...</textarea>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">Danh m·ª•c</label>
                                                    <select class="form-select" id="categorySelect" name="categoryId" required>
                                                        <option value="">ƒêang t·∫£i ...</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">Xu·∫•t x·ª©</label>
                                                    <select class="form-select" id="originSelect" name="origin" required>
                                                        <option value="">ƒêang t·∫£i ...</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">ƒê∆°n v·ªã</label>
                                                    <select class="form-select" id="unitSelect" name="unit" required>
                                                        <option value="">ƒêang t·∫£i ...</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label">Tr·∫°ng th√°i</label>
                                                    <div class="form-check form-switch">
                                                        <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                                        <label class="form-check-label" for="isActive">K√≠ch ho·∫°t</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="mb-3">
                                            <label class="form-label">H√¨nh ·∫£nh s·∫£n ph·∫©m</label>
                                            <div class="mb-2">
                                                <img src="#" onerror="this.src='/no-image.webp'" alt="Product" id="mainImage" class="img-thumbnail" style="width: 100%; height: 200px; object-fit: cover;">
                                            </div>
                                            <input type="file" class="form-control" id="productImage" name="imageFile" accept="image/*">
                                            <input type="hidden" id="imageUrl" name="imageUrl">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Gi√° (VNƒê)</label>
                                            <input type="number" class="form-control" id="price" name="price" value="0" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">S·ªë l∆∞·ª£ng t·ªìn kho</label>
                                            <input type="number" class="form-control" id="stockQuantity" name="stockQuantity" value="0" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-end mt-4">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="feather-save me-2"></i>
                                        C·∫≠p Nh·∫≠t S·∫£n Ph·∫©m
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- [ Main Content ] end -->
    </div>
    <!-- [ Footer ] start -->
    <footer class="footer">
        <p class="fs-11 text-muted fw-medium text-uppercase mb-0 copyright">
            <span>Copyright ¬©</span>
            
        </p>
        <div class="d-flex align-items-center gap-4">
            <a href="javascript:void(0);" class="fs-11 fw-semibold text-uppercase">Help</a>
            <a href="javascript:void(0);" class="fs-11 fw-semibold text-uppercase">Terms</a>
            <a href="javascript:void(0);" class="fs-11 fw-semibold text-uppercase">Privacy</a>
        </div>
    </footer>
    <!-- [ Footer ] end -->
</main> 
<script type="module">
    import url from "/Custom/endpoints.js"
    const urlParams = new URLSearchParams(window.location.search);
    const productId = urlParams.get('id');
    
    // T·∫£i danh m·ª•c, ƒë∆°n v·ªã t√≠nh v√† xu·∫•t x·ª© tr∆∞·ªõc
    const loadInitialData = async () => {
        try {
            // T·∫£i danh m·ª•c üìÇ
            const categories = await app.services.category.getAll();
            console.log("Danh m·ª•c: ", categories);
            
            if (categories.success && categories.data) {
                const categorySelect = document.getElementById('categorySelect');
                categorySelect.innerHTML = '<option value="">Ch·ªçn danh m·ª•c</option>';
                
                categories.data.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.name;
                    categorySelect.appendChild(option);
                });
            }
            
            // T·∫£i ƒë∆°n v·ªã t√≠nh üìè
            const units = await app.services.enum.fetchApi("/unit-types");
            console.log("ƒê∆°n v·ªã t√≠nh: ", units);
            
            if (units) {
                const unitSelect = document.getElementById('unitSelect');
                unitSelect.innerHTML = '<option value="">Ch·ªçn ƒë∆°n v·ªã</option>';
                
                Object.entries(units).forEach(([key, value]) => {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = value;
                    unitSelect.appendChild(option);
                });
            }
            
            // T·∫£i xu·∫•t x·ª© üåç
            const origins = await app.services.enum.fetchApi("/origin-types");
            console.log("Xu·∫•t x·ª©: ", origins);
            
            if (origins) {
                const originSelect = document.getElementById('originSelect');
                originSelect.innerHTML = '<option value="">Ch·ªçn xu·∫•t x·ª©</option>';
                
                origins.forEach(origin => {
                    const option = document.createElement('option');
                    option.value = origin;
                    option.textContent = origin;
                    originSelect.appendChild(option);
                });
            }
            
            // Sau khi t·∫£i xong d·ªØ li·ªáu c∆° b·∫£n, t·∫£i th√¥ng tin s·∫£n ph·∫©m
            await loadProductData();
        } catch (error) {
            console.error("L·ªói khi t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu:", error);
        }
    };
    
    // T·∫£i th√¥ng tin s·∫£n ph·∫©m
    const loadProductData = async () => {
        try {
            if (!productId) return;
            
            const response = await app.services.product.getById(productId);
            console.log("S·∫£n ph·∫©m: ", response);
            
            if (response.success && response.data) {
                const product = response.data;
                
                // ƒêi·ªÅn th√¥ng tin s·∫£n ph·∫©m v√†o form
                document.getElementById('productId').value = product.id;
                document.getElementById('productName').value = product.name;
                document.getElementById('productDescription').value = product.description;
                document.getElementById('categorySelect').value = product.categoryId;
                document.getElementById('price').value = product.price;
                document.getElementById('stockQuantity').value = product.stockQuantity;
                document.getElementById('unitSelect').value = product.unit;
                document.getElementById('originSelect').value = product.origin;
                document.getElementById('isActive').checked = product.isActive;
                document.getElementById('imageUrl').value = product.imageUrl || '';
                
                // Hi·ªÉn th·ªã h√¨nh ·∫£nh s·∫£n ph·∫©m n·∫øu c√≥
                if (product.imageUrl) {
                    document.getElementById('mainImage').src = `${url.baseUrl}/img/Products/${product.imageUrl}`;
                }
            }
        } catch (error) {
            console.error("L·ªói khi t·∫£i th√¥ng tin s·∫£n ph·∫©m:", error);
        }
    };
    
    // Hi·ªÉn th·ªã ·∫£nh preview khi ch·ªçn file
    document.getElementById('productImage').addEventListener('change', function(e) {
        if (e.target.files && e.target.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                document.getElementById('mainImage').src = e.target.result;
            }
            reader.readAsDataURL(e.target.files[0]);
        }
    });
    
    // Kh·ªüi t·∫£i d·ªØ li·ªáu
    loadInitialData();
    
    // X·ª≠ l√Ω submit form
    document.getElementById('productEditForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        try {
            // T·∫°o FormData t·ª´ form
            const form = document.getElementById('productEditForm');
            const formData = new FormData(form);
            
            // X·ª≠ l√Ω checkbox isActive ri√™ng v√¨ FormData kh√¥ng t·ª± x·ª≠ l√Ω ƒë√∫ng
            const isActive = document.getElementById('isActive').checked;
            formData.set('isActive', isActive);
            
            // G·ªçi API c·∫≠p nh·∫≠t s·∫£n ph·∫©m
            const result = await app.services.product.update(productId, formData, true);
            
            if (result && result.success) {
                Toast.success('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
            } else {
                Toast.error('C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i!');
            }
        } catch (error) {
            let errorMessages = [];
            for (const field in error.errors) {
                error.errors[field].forEach(message => {
                    errorMessages.push(message);
                });

                // Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªói validation
                if (errorMessages.length > 0) {
                    errorMessages.forEach(message => {
                        Toast.error(message);
                    });
                } else {
                    Toast.error('ƒê√£ x·∫£y ra l·ªói khi t·∫°o s·∫£n ph·∫©m! ' + error.title || error.message);
                }
            } 
        }
    });
</script>
